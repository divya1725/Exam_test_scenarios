<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="6809239f-a3e7-46e4-9b4e-53186762b0c2" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Order Receipt PRINT for COMP Payment" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" xmlns:con="http://eviware.com/soapui/config">
  <con:description>This testcase validates that PM user can order receipt(PRINT)  when status is COMP and user can reorder Sticker multiple times.
Verifies tag in DB Hist &amp; RBS BK12 tables and operational array in all the Historic searches.</con:description>
  <con:settings>
    <con:setting id="6809239f-a3e7-46e4-9b4e-53186762b0c2fileName">Order-Receipt-PRINT-for-COMP-Payment</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="Properties" id="3ac76bd9-6da2-4823-ac6d-5ae13dc8db5b">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>SourceApplication</con:name>
          <con:value>EVRYINT</con:value>
        </con:property>
        <con:property>
          <con:name>credentials</con:name>
          <con:value>03110012010400425kglPboRi3h1Z4YUjUpQ0UB65Ta2kPKj1KWwkWemtrL+SoWqMxx/KuqxUVbNyTu6DsSaabKNt2t+xJppso23a37EmmmyjbdrffJeRiGWfHDGwxCWOpDYc2jgSxAz1+8eEsSaabKNt2t/XzlyjxYnxhcG46wcbIKp/sSaabKNt2t9wBUG0SyIoqFfig80Gq4uXVBtimDzTiu2xJppso23a37Emmmyjbdrf8wP73CNrvpw=apG4tU0NraPbbqKUp39erKDFa7xy6z+r4VDMr/6qBlkFniGaNeDXv4cZcZZQQI6JtwB3JYQk6WqLA7oyp1FWRM6n46ehgNmHVNly8fTnQbIuGJSF2LUyGI7aE92/dgtp8jv9bsGpNe58K+xb4LeIHwjb2nVVvt4/2oLtDQ8IPJE=</con:value>
        </con:property>
        <con:property>
          <con:name>channel</con:name>
          <con:value>NBA</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>item1</con:name>
          <con:value>PaymentChannel</con:value>
        </con:property>
        <con:property>
          <con:name>value1</con:name>
          <con:value>INT</con:value>
        </con:property>
        <con:property>
          <con:name>item2</con:name>
          <con:value>LogRef</con:value>
        </con:property>
        <con:property>
          <con:name>value2</con:name>
          <con:value>${= java.time.LocalDateTime.now().plusDays(1).format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}-${=context.getCurrentStep().getTestCase().getLabel()}</con:value>
        </con:property>
        <con:property>
          <con:name>ReqExnDate</con:name>
          <con:value>${= java.time.LocalDateTime.now().plusDays(1).format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}</con:value>
        </con:property>
        <con:property>
          <con:name>ConnectionString</con:name>
          <con:value>jdbc:oracle:thin:forfall/forfall@//10.246.89.97:1530/rbst5_taf</con:value>
        </con:property>
        <con:property>
          <con:name>ReceiptOrder</con:name>
          <con:value>PRINT</con:value>
        </con:property>
        <con:property>
          <con:name>PaymentStatus</con:name>
          <con:value>COMP</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Fetch COMP Data" id="98e4c8b6-3de9-4c0f-8cf7-b9c3ca30f4aa">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select C.TRANSACTIONSID,A.MESSAGEID,C.DEBETACCOUNTNO,A.CUSTOMERID,C.PAYMENTTYPE,C.PAYMENTSTATUS,C.RECEIPTORDER,A.MARKETTYPE,C.INITIATORBANKID
from HST_MESSAGE A,HST_PAYMENTINFO B, HST_TRANSACTIONS C where A.MARKETTYPE = 'PM' and
 A.MESSAGEID = B.FK_MESSAGEID and B.PAYMENTINFOID = C.FK_PAYMENTINFOID and C.PAYMENTSTATUS = 'COMP'
and  C.PAYMENTTYPE = 'DOMM'
 and C.INITIATORBANKID = '4201' order by A.MESSAGEID desc fetch first row only</con:query>
      <con:assertion type="MessageContentAssertion" id="68103f0c-135c-449d-8964-d5e2304e7268" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>1</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]</con:xpath>
            <con:element>TRANSACTIONSID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>12063</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]</con:xpath>
            <con:element>DEBETACCOUNTNO</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42022512891</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTTYPE[1]</con:xpath>
            <con:element>PAYMENTTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>DOMM</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTSTATUS[1]</con:xpath>
            <con:element>PAYMENTSTATUS</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>COMP</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/RECEIPTORDER[1]</con:xpath>
            <con:element>RECEIPTORDER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NONE</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/MARKETTYPE[1]</con:xpath>
            <con:element>MARKETTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>PM</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/INITIATORBANKID[1]</con:xpath>
            <con:element>INITIATORBANKID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>4201</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <TRANSACTIONSID>12063</TRANSACTIONSID>
         <DEBETACCOUNTNO>42022512891</DEBETACCOUNTNO>
         <PAYMENTTYPE>DOMM</PAYMENTTYPE>
         <PAYMENTSTATUS>COMP</PAYMENTSTATUS>
         <RECEIPTORDER>NONE</RECEIPTORDER>
         <MARKETTYPE>PM</MARKETTYPE>
         <INITIATORBANKID>4201</INITIATORBANKID>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Fetch Account Data" id="58a137ad-4409-4b29-a67e-48754325b568">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select AGREEMENTID,ACCOUNTNUMBER,FIRSTNAME,CURRENCYCODE  from V_AUTH_USERINFO where ACCOUNTNUMBER = '${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}' and channel = 'INT' and AGREEMENTID = '${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMERID[1]}'</con:query>
      <con:assertion type="MessageContentAssertion" id="c01c4ad3-8a0b-48dc-9fbb-1bddaf4bb3e2" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>1</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>Test</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[2]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>2</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[2]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[2]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[2]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>Test</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[2]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[3]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>3</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[3]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[3]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[3]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>Test</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[3]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[4]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>4</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[4]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[4]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[4]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>Test</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[4]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[5]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>5</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[5]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[5]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[5]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>Test</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[5]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[6]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>6</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[6]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[6]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[6]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[6]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[7]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>7</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[7]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[7]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[7]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[7]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[8]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>8</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[8]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[8]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[8]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[8]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[9]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>9</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[9]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[9]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[9]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[9]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[10]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[10]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[10]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[10]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[10]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[11]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>11</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[11]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[11]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[11]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[11]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[12]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>12</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[12]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[12]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[12]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[12]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[13]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>13</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[13]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[13]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[13]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[13]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[14]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>14</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[14]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[14]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[14]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[14]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[15]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[15]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[15]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[15]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[15]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[16]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>16</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[16]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[16]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[16]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[16]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[17]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>17</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[17]/AGREEMENTID[1]</con:xpath>
            <con:element>AGREEMENTID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>15106410000</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[17]/ACCOUNTNUMBER[1]</con:xpath>
            <con:element>ACCOUNTNUMBER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42023281230</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[17]/FIRSTNAME[1]</con:xpath>
            <con:element>FIRSTNAME</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>exists</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue xsi:nil="true"/>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[17]/CURRENCYCODE[1]</con:xpath>
            <con:element>CURRENCYCODE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NOK</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME>Test</FIRSTNAME>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="2">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME>Test</FIRSTNAME>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="3">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME>Test</FIRSTNAME>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="4">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME>Test</FIRSTNAME>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="5">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME>Test</FIRSTNAME>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="6">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="7">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="8">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="9">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="10">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="11">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="12">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="13">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="14">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="15">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="16">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
      <Row rowNumber="17">
         <AGREEMENTID>15106410000</AGREEMENTID>
         <ACCOUNTNUMBER>42023281230</ACCOUNTNUMBER>
         <FIRSTNAME/>
         <CURRENCYCODE>NOK</CURRENCYCODE>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="DeleteReceiptOrder_DB" id="0c23621c-e083-4e49-bd08-af0fbc46bb90">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>update HST_TRANSACTIONS set  RECEIPTORDER ='NONE' where TRANSACTIONSID = '${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}'</con:query>
      <con:assertion type="JDBC Status" id="ead40eef-319b-4ad1-b74f-9b29cc097b27" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="c0cae8f4-c741-4b9a-af68-7031378d54b1" name="Receipt Order">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentUtil_V1_1PortTypeSoap11</con:interface>
      <con:operation>ReceiptOrderUpdate</con:operation>
      <con:request name="Receipt Order" id="6cd07d24-ee48-4ef1-bcc5-cbee799104c4">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPaymentUtil_V1_1Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentutil:v1_1" xmlns:urn1="urn:pins.payment.edb.com:domain:paymentutil:v1_1">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:ReceiptOrderUpdateRequest>
         <urn:receiptOrder>
            <urn1:debitAccount>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}</urn1:debitAccount>
            <!--You have a CHOICE of the next 2 items at this level-->
            <urn1:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn1:transactionId>
            <urn1:receiptType>PRINT</urn1:receiptType>
         </urn:receiptOrder>
      </urn:ReceiptOrderUpdateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="1475c7e8-a878-4dfa-adf8-19c2ba43a51d" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="4b7257ff-9a6c-4bd9-a3f9-01ffb7faebb0" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="47a66cae-946d-4879-b400-0e2d57a46b64" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="MessageContentAssertion" id="8e6ba22c-8866-471a-822c-852926ad9f5e" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:Severity[1]</con:xpath>
              <con:element>Severity</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:ComponentId[1]</con:xpath>
              <con:element>ComponentId</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>111</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:StrErrorCode[1]</con:xpath>
              <con:element>StrErrorCode</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:StrErrorCode[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>OK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:NativeError[1]</con:xpath>
              <con:element>NativeError</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:NativeError[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:LogSequence[1]</con:xpath>
              <con:element>LogSequence</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:LogSequence[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentutil:v1_1';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:debitAccount[1]</con:xpath>
              <con:element>ns2:debitAccount</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentutil:v1_1';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:transactionId[1]</con:xpath>
              <con:element>ns2:transactionId</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>152179002</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentutil:v1_1';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:receiptType[1]</con:xpath>
              <con:element>ns2:receiptType</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>PRINT</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns3:ReceiptOrderUpdateResponse xmlns:ns8="urn:pays.payment.edb.com:domain:nationalinformation-nor:v1_0" xmlns:ns7="urn:pays.payment.edb.com:domain:sepa-complex-types:v5" xmlns:ns6="urn:srv.pays.payment.fs.evry.com:ws:agreementcapture:v1_0" xmlns:ns5="urn:srv.stord.fs.evry.com:domain:common:v1" xmlns:ns4="urn:pays.payment.edb.com:domain:edb-types:v1" xmlns:ns3="urn:pins.payment.edb.com:ws:paymentutil:v1_1" xmlns:ns2="urn:pins.payment.edb.com:domain:paymentutil:v1_1" xmlns="http://edb.com/ws/WSCommon_v21">
         <ns4:ResponseState>
            <ErrorCode>0</ErrorCode>
            <Severity>0</Severity>
            <ComponentId>111</ComponentId>
            <StrErrorCode xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <Message>OK</Message>
            <NativeError xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns4:ResponseState>
         <ns3:receiptOrder>
            <ns2:debitAccount>96620110350</ns2:debitAccount>
            <ns2:transactionId>152179002</ns2:transactionId>
            <ns2:receiptType>PRINT</ns2:receiptType>
         </ns3:receiptOrder>
      </ns3:ReceiptOrderUpdateResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentutil:v1_1/PINSPaymentUtil_V1_1PortType/ReceiptOrderUpdateRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="c13e64ba-f1cb-4ef7-b172-b771be88571e" name="Receipt ReOrderPrint">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentUtil_V1_1PortTypeSoap11</con:interface>
      <con:operation>ReceiptOrderUpdate</con:operation>
      <con:request name="Receipt ReOrderPrint" id="6cd07d24-ee48-4ef1-bcc5-cbee799104c4">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPaymentUtil_V1_1Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentutil:v1_1" xmlns:urn1="urn:pins.payment.edb.com:domain:paymentutil:v1_1">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:ReceiptOrderUpdateRequest>
         <urn:receiptOrder>
            <urn1:debitAccount>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}</urn1:debitAccount>
            <!--You have a CHOICE of the next 2 items at this level-->
            <urn1:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn1:transactionId>
            <urn1:receiptType>PRINT</urn1:receiptType>
         </urn:receiptOrder>
      </urn:ReceiptOrderUpdateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="1475c7e8-a878-4dfa-adf8-19c2ba43a51d" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="4b7257ff-9a6c-4bd9-a3f9-01ffb7faebb0" name="Not SOAP Fault"/>
        <con:assertion type="MessageContentAssertion" id="f3471a24-b3c3-4351-802f-f9e04ec0cd60" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>OK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentutil:v1_1';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:debitAccount[1]</con:xpath>
              <con:element>ns2:debitAccount</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>exists</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>42023281230</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentutil:v1_1';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentutil:v1_1';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:receiptType[1]</con:xpath>
              <con:element>ns2:receiptType</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>PRINT</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns3:ReceiptOrderUpdateResponse xmlns:ns8="urn:pays.payment.edb.com:domain:nationalinformation-nor:v1_0" xmlns:ns7="urn:pays.payment.edb.com:domain:sepa-complex-types:v5" xmlns:ns6="urn:srv.pays.payment.fs.evry.com:ws:agreementcapture:v1_0" xmlns:ns5="urn:srv.stord.fs.evry.com:domain:common:v1" xmlns:ns4="urn:pays.payment.edb.com:domain:edb-types:v1" xmlns:ns3="urn:pins.payment.edb.com:ws:paymentutil:v1_1" xmlns:ns2="urn:pins.payment.edb.com:domain:paymentutil:v1_1" xmlns="http://edb.com/ws/WSCommon_v21">
         <ns4:ResponseState>
            <ErrorCode>0</ErrorCode>
            <Severity>0</Severity>
            <ComponentId>111</ComponentId>
            <StrErrorCode xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <Message>OK</Message>
            <NativeError xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns4:ResponseState>
         <ns3:receiptOrder>
            <ns2:debitAccount>42023281230</ns2:debitAccount>
            <ns2:transactionId>260481080</ns2:transactionId>
            <ns2:receiptType>PRINT</ns2:receiptType>
         </ns3:receiptOrder>
      </ns3:ReceiptOrderUpdateResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentutil:v1_1/PINSPaymentUtil_V1_1PortType/ReceiptOrderUpdateRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Verify ReceiptOrder" id="029c28f3-dfa9-4db5-929b-9805a84fe1d1">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select TRANSACTIONSID,PAYMENTTYPE,PAYMENTSTATUS,RECEIPTORDER from HST_TRANSACTIONS where TRANSACTIONSID = '${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}'</con:query>
      <con:assertion type="MessageContentAssertion" id="5b423d65-da3b-48cb-a1d8-7b48ba829726" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>1</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]</con:xpath>
            <con:element>TRANSACTIONSID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>68719</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTTYPE[1]</con:xpath>
            <con:element>PAYMENTTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>DOKI</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTSTATUS[1]</con:xpath>
            <con:element>PAYMENTSTATUS</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>COMP</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/RECEIPTORDER[1]</con:xpath>
            <con:element>RECEIPTORDER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>PRINT</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <TRANSACTIONSID>68719</TRANSACTIONSID>
         <PAYMENTTYPE>DOKI</PAYMENTTYPE>
         <PAYMENTSTATUS>COMP</PAYMENTSTATUS>
         <RECEIPTORDER>PRINT</RECEIPTORDER>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Verify RBS table" id="92080f75-d4bb-4621-965a-a7bd4fc6494a">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>RBS_FORFALL</con:dbConnectionName>
      <con:driver>sun.jdbc.odbc.JdbcOdbcDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:forfall/forfall@10.246.89.97:1530/rbst5_taf</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select * from BK12 where KONTONR = '${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}'</con:query>
      <con:assertion type="Simple Contains" id="1e332622-c1df-425a-a250-7c63f46f2d0b" name="Contains">
        <con:configuration>
          <token>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="f0a44d8b-bc91-471d-b680-9ca56d048839" name="PaymentHistoricRead_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V2_0" id="f8ddd876-4764-4817-93ef-a02c896fd78f">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="41c08765-1186-491c-a12b-6bb8e6b7a3c7" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="fbcc8f42-6a19-4b79-b3db-932e43719121" name="Not SOAP Fault"/>
        <con:assertion type="GroovyScriptAssertion" id="db34d93c-f325-4ac0-a260-77f89c03685c" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					     tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')
					     tempList.add ('RECEIPT_ORDER_PRINT')				
					}	
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0/PINSPayment_V2_0PortType/PaymentHistoricReadRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="c0d69117-5338-4824-b241-d0b10348d029" name="PaymentHistoricRead_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="09f30fdd-4424-4d88-80aa-e2d974a51627">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_9">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="761721c8-db8d-4830-ae99-82f20515de56" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="f58861bd-05e6-4c16-93d9-40a930982ded" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="328f0842-b33b-477a-9247-fe3aa1538202" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="9ed34a4e-4613-4bc6-9a0c-1ccf17716fd6" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_9/PINSPayment_V1_9PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="47061a52-327b-42ed-abd5-a83c01ab5fd5" name="PaymentHistoricRead_V1_10">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_10PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V1_10" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="74ed1263-3041-4362-a361-3dcd520436f2">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_10</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_10">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="109b0b00-bd1e-48f0-8e4f-0558fd663663" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="e9791c13-c17f-4406-9896-08b8b5066636" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="3c6b42c7-6e9c-40a8-aa9f-5cce6e7d24bf" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="dbfd1724-57d1-4c17-ba2a-aad88d90b083" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_10/PINSPayment_V1_10PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="ad87ce54-1b29-4c1c-bb00-95c357100f3b" name="PaymentHistoricRead_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V1_8" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b21a82e0-479b-49b0-8cab-f792e85b03e3">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="0757e870-463f-4e95-bc8f-8712c633f5c3" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="71ce8020-4776-470f-89d0-e055db47ff5a" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="e3b7ae83-c176-4a60-b51d-d8aa0066793c" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="0d4d0271-470c-4cde-a0ab-82318cd74c09" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_8/PINSPayment_V1_8PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="2e9b7b18-ae8f-4dcb-b4be-a070131a3880" name="PaymentHistoricRead_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V1_7" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="00b41a81-390c-4e59-8025-f68baa94fdac">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_7</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="5078d221-f076-4486-89ce-2a5728f979f4" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="61a6cf19-1f9c-433d-8ef8-c2050785ef13" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="69e9335b-7eea-40dc-824e-070b29f43407" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="70477118-81fc-4211-9396-0a15ce8b4fe8" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7/PINSPayment_V1_7PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="1a960add-cb38-4dd6-878a-2621820591bd" name="PaymentHistoricRead_V1_6" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PaymentHistoricRead_V1_6" id="f40c07e5-cf4c-4ca5-b1c2-985c13b44c9e">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPayment_V1_6</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentinitiation:v1_6">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="2ec8870b-2ce6-4fca-b9ac-d3148f33e96a" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="47d435c7-5585-4d10-9855-55181b80c4d8" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="05b824ce-fca4-4f75-9b35-9f4a19f6ad31" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="0828c843-2885-4cab-9e37-8884fa09c2de" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentinitiation:v1_6/PINSPayment_V1_6PortType/PaymentHistoricReadRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="aea74952-6219-4b81-9e0e-2920eab42688" name="PaymentPaymentInfoHistoricSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoHistoricSearch</con:operation>
      <con:request name="PaymentPaymentInfoHistoricSearch_V2_0" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="dc311a69-33f3-48d3-a6fd-274044e391fb">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:22561/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:processedDate>
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="c07df938-9862-490b-8dda-da32b17a6d30" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="7d28128a-3464-4cd5-a4aa-1871a717c820" name="Not SOAP Fault"/>
        <con:assertion type="GroovyScriptAssertion" id="d2a6c3f8-fb7c-4e1b-948c-6784e2892e66" name="Script Assertion 2">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')					
					}
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')					
					}			
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentPaymentInfoHistoricSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="5baaed2b-c1a7-422a-9f16-6a3f72dbe182" name="PaymentPaymentInfoHistoricSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoHistoricSearch</con:operation>
      <con:request name="PaymentPaymentInfoHistoricSearch_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="56ed8147-d02d-45f0-887c-012288c1c6fa">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
     <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="e748e82f-86d0-416b-b3dd-2d60e63e06c0" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="65d11047-8dae-4a93-873b-968d793facac" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="61f0fb95-8638-4389-bafb-9e362d2144fb" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="67f94ae1-c07a-454a-a7ce-320788849415" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentPaymentInfoHistoricSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="608dc73c-25d8-4395-b564-8e1d48f0fa20" name="PaymentPaymentInfoHistoricSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoHistoricSearch</con:operation>
      <con:request name="PaymentPaymentInfoHistoricSearch_V1_8" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5a04b19a-0435-4ff7-8d71-1dc57d119aff">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="c56eb3b4-052e-4b0f-8ecb-cb6c55f85144" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="25187344-9926-4d31-97c7-4f65fc783469" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="8fd9bbca-2544-4c1c-bbbc-caeaed184ca1" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="8119d0cf-b6a5-4304-ab8f-0af73b7843c6" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentPaymentInfoHistoricSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="db6f1cc8-a853-4d36-a9a0-47716eec3970" name="PaymentPaymentInfoHistoricSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoHistoricSearch</con:operation>
      <con:request name="PaymentPaymentInfoHistoricSearch_V1_7" id="9a43c0b9-0c30-41e4-b263-bcfab30c6c3f">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_7Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
     <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  
               </urn1:amount>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:dateFromTo>
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
               
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="5019b196-77b4-4732-9db3-341d4fb70247" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="7c9d70c8-2170-46a4-9722-513117414eee" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="4992a37c-1a5f-4029-8de7-e5871cd8f608" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="b4f596a9-e517-425e-90db-0bd5a31f356a" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentPaymentInfoHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="c862fda0-9bcb-47c7-a1c0-a3cc45975e20" name="PaymentPaymentInfoHistoricSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoHistoricSearch</con:operation>
      <con:request name="PaymentPaymentInfoHistoricSearch_V1_6" id="4a4ce48b-3934-4c7f-bbd3-9b569f5979e2">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPaymentSearch_V1_6Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">\r
   <soapenv:Header>\r
      <wsc:AutHeader>\r
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>\r
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>\r
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>\r
         <wsc:Version>1.0</wsc:Version>\r
         <wsc:ClientContext>\r
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>\r
            <wsc:credentials>${Properties#credentials}</wsc:credentials>\r
            <wsc:channel>${Properties#channel}</wsc:channel>\r
            <wsc:orgid>${Properties#orgid}</wsc:orgid>\r
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>\r
            <wsc:ip>1.1.1.1</wsc:ip>\r
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>\r
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>\r
         </wsc:ClientContext>\r
      </wsc:AutHeader>\r
   </soapenv:Header>\r
   <soapenv:Body>\r
      <urn:PaymentPaymentInfoHistoricSearchRequest>\r
         <urn:searchCriteria>\r
            <urn1:commonCriteria>\r
               <urn1:elementControl>\r
                  <con:StartIndex>0</con:StartIndex>\r
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>\r
               </urn1:elementControl>\r
               <!--Zero or more repetitions:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
            </urn1:commonCriteria>\r
            <urn1:transactionCriteria>\r
               <!--Optional:-->\r
               <urn1:amount>\r
                  <!--You have a CHOICE of the next 2 items at this level-->\r
                  <!--Optional:-->\r
                  <!--Optional:-->\r
                  <urn2:amountMaxMin>\r
                     <!--Optional:-->\r
                     <!--Optional:-->\r
                  </urn2:amountMaxMin>\r
                  <!--Optional:-->\r
               </urn1:amount>\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <urn1:showHidden>false</urn1:showHidden>\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <!--Optional:-->\r
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>\r
               <urn1:processedDate>\r
                  <!--You have a CHOICE of the next 2 items at this level-->\r
                  <!--Optional:-->\r
                  <!--Optional:-->\r
                  <urn2:dateFromTo>\r
                     <!--Optional:-->\r
                     <!--Optional:-->\r
                  </urn2:dateFromTo>\r
               </urn1:processedDate>\r
               <!--Zero or more repetitions:-->\r
            </urn1:transactionCriteria>\r
         </urn:searchCriteria>\r
      </urn:PaymentPaymentInfoHistoricSearchRequest>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="df7c0d75-7c96-42f0-badf-10c711f179fe" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="4615039b-ccf1-4bbd-82e6-bb8b282511fb" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="d39d1e03-287b-4faf-93e9-205fb4738524" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4de80246-ed1d-4836-a21f-8af8b0794539" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentPaymentInfoHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="fad3a16e-afe3-454f-85c1-5fddf5ffe833" name="PaymentTransactionHistoricSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionHistoricSearch</con:operation>
      <con:request name="PaymentTransactionHistoricSearch_V2_0" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="748da3a5-596a-4bef-8719-befa2c312e55">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:22561/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:processedDate>
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="240eadb6-336b-4f2b-a9f0-016f0bf6745f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="ab72eedf-6474-4481-963b-cf49c70992e7" name="Not SOAP Fault"/>
        <con:assertion type="GroovyScriptAssertion" id="29779f10-b6ec-4070-b09b-eb3146993af7" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')					
					}
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')					
					}
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentTransactionHistoricSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="a4e16bf0-39d3-42bd-9099-21893d0dea3b" name="PaymentTransactionHistoricSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionHistoricSearch</con:operation>
      <con:request name="PaymentTransactionHistoricSearch_V1_9" id="dd18dec3-2839-4ed5-960b-911d2adbf013">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:dateFromTo>
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="adb17361-150e-4d73-af51-9fef4a289795" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="c54080df-a756-4948-8bcb-0ee3041996f7" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="88324d1a-69b9-4431-b9b8-257dec398927" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="427926ac-291c-42db-a219-15c45c0105f7" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentTransactionHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="2e988061-5ced-4c79-8ce7-45e7c02dda3c" name="PaymentTransactionHistoricSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionHistoricSearch</con:operation>
      <con:request name="PaymentTransactionHistoricSearch_V1_8" id="32dbbe85-6d38-4fee-b827-d5caf382432f">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->

                  <!--Optional:-->
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="d99619a2-23d4-4ba1-9017-aa3658b5a14a" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="9767dd3f-6fc7-4ec9-8622-e0570dd80b6f" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="3200464d-3587-4f28-bf64-22450bf5e871" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="2a00f6d7-133d-49e0-b030-0cf8b85ba9ad" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentTransactionHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="57890f94-f031-4224-9123-b13d1cfbbe92" name="PaymentTransactionHistoricSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionHistoricSearch</con:operation>
      <con:request name="PaymentTransactionHistoricSearch_V1_7" id="c636ab2a-2f0d-43a9-9e4b-a1050b4edd00">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_7Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
     <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  
               </urn1:amount>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:dateFromTo>
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
               
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="84be7dc9-fceb-428d-8621-b9efb6cc25ae" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="05a8b2b3-066f-4265-afe9-d115206e9f77" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="db645186-f4c2-4c31-a581-428ab607ea7f" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="bc6ee168-1458-4f82-a5a9-b02867933ce4" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentTransactionHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="880d16af-0670-48ea-a433-4f5829757b9a" name="PaymentTransactionHistoricSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionHistoricSearch</con:operation>
      <con:request name="PaymentTransactionHistoricSearch_V1_6" id="a916be53-dc69-4283-a21a-51e7724f494b">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPaymentSearch_V1_6Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Fetch Account Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionHistoricSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  
               </urn1:amount>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:messageId>${Fetch COMP Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:processedDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:dateFromTo>
               </urn1:processedDate>
               <!--Zero or more repetitions:-->
               
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionHistoricSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="9674adca-0a4b-41df-8248-22d42d4db06c" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="d1d94ac6-bb11-48ae-87c1-28e534cf0164" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="2638750d-34e7-48fb-83eb-d03f37330842" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="5c7d151b-e4ae-403f-8b61-0b1dacc3e2e5" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentTransactionHistoricSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>8167094a-00a6-434a-9588-31a9de204fb8</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>921ce22c-5c29-4284-a083-a1a1a0117555</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a70f8027-178c-4de6-8bc5-74ac99217e62</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>258ba11c-c48e-4bfc-a96a-d5f6470381a6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>aaa0220f-b6d3-48f0-a5a7-a2b12983d00a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1c7ee62f-4466-469a-84ec-e66f85b086d2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>35f8d9ed-12a3-4131-a1a3-47b30c8a0708</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>52921ec2-4da3-4a88-a87e-bdcb9e775726</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>42d775b8-c8f2-4bac-8646-ad15bb253f8e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>08f617c7-e529-4c47-9316-68b8a02e3a43</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1b2f72c5-5fc2-440a-ae62-c56eddb5b9ed</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0e09f67d-e171-4e98-8285-08b7c36fd12b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b0448c91-fc9e-4d51-a4a5-f512c0387c25</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4f61c865-d495-48dd-b2ad-37a4cc423ecc</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c0cae8f4-c741-4b9a-af68-7031378d54b1</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c13e64ba-f1cb-4ef7-b172-b771be88571e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
