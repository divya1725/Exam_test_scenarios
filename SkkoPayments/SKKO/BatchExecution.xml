<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="75a28a36-55ed-4710-a995-05db4002c64d" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="BatchExecution" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="113148c1-2ff0-434e-a848-f880ecb3a37dfileName">BatchExecution</con:setting>
    <con:setting id="75a28a36-55ed-4710-a995-05db4002c64dfileName">BatchExecution</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="Properties" id="1c6417f2-c8e6-4962-bdf2-f90dea0be3c5">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>SourceApplication</con:name>
          <con:value>EVRYINT</con:value>
        </con:property>
        <con:property>
          <con:name>UserID</con:name>
          <con:value>${#TestSuite#customerid}</con:value>
        </con:property>
        <con:property>
          <con:name>credentials</con:name>
          <con:value>03110012010400425kglPboRi3h1Z4YUjUpQ0UB65Ta2kPKj1KWwkWemtrL+SoWqMxx/KuqxUVbNyTu6DsSaabKNt2t+xJppso23a37EmmmyjbdrffJeRiGWfHDGwxCWOpDYc2jgSxAz1+8eEsSaabKNt2t/XzlyjxYnxhcG46wcbIKp/sSaabKNt2t9wBUG0SyIoqFfig80Gq4uXVBtimDzTiu2xJppso23a37Emmmyjbdrf8wP73CNrvpw=apG4tU0NraPbbqKUp39erKDFa7xy6z+r4VDMr/6qBlkFniGaNeDXv4cZcZZQQI6JtwB3JYQk6WqLA7oyp1FWRM6n46ehgNmHVNly8fTnQbIuGJSF2LUyGI7aE92/dgtp8jv9bsGpNe58K+xb4LeIHwjb2nVVvt4/2oLtDQ8IPJE=</con:value>
        </con:property>
        <con:property>
          <con:name>channel</con:name>
          <con:value>NBA</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>customerid</con:name>
          <con:value>${#TestSuite#customerid}</con:value>
        </con:property>
        <con:property>
          <con:name>item1</con:name>
          <con:value>PaymentChannel</con:value>
        </con:property>
        <con:property>
          <con:name>value1</con:name>
          <con:value>INT</con:value>
        </con:property>
        <con:property>
          <con:name>item2</con:name>
          <con:value>LogRef</con:value>
        </con:property>
        <con:property>
          <con:name>value2</con:name>
          <con:value>${=new Date().format("ddMMyyyy_HHmmss")}-${=context.getCurrentStep().getTestCase().getLabel()}</con:value>
        </con:property>
        <con:property>
          <con:name>ReqExnDate</con:name>
          <con:value>${=def now = new Date()+1;now.format("yyyy-MM-dd")}</con:value>
        </con:property>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>${#TestSuite#accountNumber}</con:value>
        </con:property>
        <con:property>
          <con:name>currencyCode</con:name>
          <con:value>${#TestSuite#currencyCode}</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorAgent</con:name>
          <con:value>SPTRNO22XXX</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorCountry</con:name>
          <con:value>NO</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorCurrency</con:name>
          <con:value>NOK</con:value>
        </con:property>
        <con:property>
          <con:name>CreditAccountNumber</con:name>
          <con:value>42021341821</con:value>
        </con:property>
        <con:property>
          <con:name>Amount</con:name>
          <con:value>20</con:value>
        </con:property>
        <con:property>
          <con:name>AgreementId</con:name>
          <con:value>${#TestSuite#customerid}</con:value>
        </con:property>
        <con:property>
          <con:name>transactionId</con:name>
          <con:value>185774</con:value>
        </con:property>
        <con:property>
          <con:name>messageId</con:name>
          <con:value>144869</con:value>
        </con:property>
        <con:property>
          <con:name>fraudMessage</con:name>
          <con:value>${#TestSuite#fraudMessage}</con:value>
        </con:property>
        <con:property>
          <con:name>endToEndId</con:name>
          <con:value>4461527</con:value>
        </con:property>
        <con:property>
          <con:name>kriterieType</con:name>
          <con:value>IP_ADRESSE</con:value>
        </con:property>
        <con:property>
          <con:name>transactionsIds</con:name>
          <con:value>260198980, 260198981</con:value>
        </con:property>
        <con:property>
          <con:name>DueDate</con:name>
          <con:value>${= java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="setPORSchemaFree" id="d959cf03-d13d-46d9-a743-93ffbcde311d">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>Database</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>update CTL_BATCH_RUN_SCHEMA set STATUS = 'FREE' where SCHEMA_NAME in (select SCHEMA_NAME from CTL_BATCH_RUN_SCHEMA  order by START_TIMESTAMP asc fetch first 1 rows only)</con:query>
      <con:assertion type="JDBC Status" id="5a4aec68-6ce1-4ea9-a6c5-9c6aba3cfedd" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PORBatchJobRun" id="a4492e6d-2c20-4046-b071-71f8ab30c184">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Running the batch...."

def nextDate =  new Date() ;
nextDate =java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyyy/MM/dd'))
//nextDate = nextDate.format("yyyy/MM/dd")
def runId = new Date()
//runId = runId.format("YYYY-MM-dd'T'HH:mm:ss.SSSSSSSSS")
runId=java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("YYYY-MM-dd'T'HH:mm:ss.SSSSSSSSS"))

//String shParameter = "pwhFraudRevalidationProcess.sh classpath:spring/pwh-fraud-revalidation-job-batch-context.xml pwhFraudRevalidationProcess paymentStatuses=\"RFDD,LAFU,TERE\" releaseDate=${nextDate} banksInProcess=\"4201\" 2>&amp;1"
String shParameter = "porCommonReservationLauncher.sh processLine=DOM_PAYMENT_RTS paymentStatuses=RFDD,LAFU releaseDate=${nextDate} jobRunType=NORMAL porType=CompletePOR banksInProcess=4201 marketType=BM runId=$runId"
String CommandOutPut = ServerConnect.execBatchCommand(env , "pin" ,shParameter,log)	


log.info "shParameter : "+shParameter
log.info "CommandOutput returned-->" + CommandOutPut
ServerConnect.closeConnection()
def porSuccessMessage1 = 'POR reservation job completed'
def porSuccessMessage2 ='POR reservation job went OK'

assert (CommandOutPut.trim() != "" &amp;&amp; (CommandOutPut.contains(porSuccessMessage1) ||  CommandOutPut.contains(porSuccessMessage2))), "CommandLine OutPut having error!!, Executed command :" + CommandOutPut</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="BatchExecutionStep" id="cdcb5c32-dac5-4bb7-b37e-e89f6dc868b2">
    <con:settings/>
    <con:config>
      <script>def project = testRunner.testCase.testSuite.getProject()
def currentSuite = testRunner.getTestCase().getTestSuite().name
def currentTestCase= testRunner.getTestCase().name
def currentTestStepName = context.testCase.getTestStepAt(context.getCurrentStepIndex()).getLabel()
def testSuite = testRunner.testCase.getTestSuite()

//Post Batch run validation started for all the disabled testcases
log.info "Post Batch run validation started for all the disabled testcases!!"
def resultSuite  = ""

def a = testSuite.testCaseList.each{ eachTestCase ->
	testCaseNameTemp = eachTestCase.name
	def resultCase = ""
	if( eachTestCase.hasProperty("postTestCaseValidation") &amp;&amp; eachTestCase.getPropertyValue('status').equals("PASS") &amp;&amp; !eachTestCase.isDisabled() ){		
		def testCasetemp  = eachTestCase
		def transactionId = testCasetemp.getPropertyValue("transactionsIds")
		def ExpectedStatus = testCasetemp.getPropertyValue("expectedPmtStatus")
		def transactionIds = transactionId.replaceAll("\\[|\\]",'')
		
		testRunner.getTestCase().getTestStepByName("Properties").setPropertyValue("transactionsIds",transactionIds)
					
			def testStepInclusionList = ['SKKOTransactionStatusValidation']
			// run post batch run validation for each disbled testcase
			testRunner.getTestCase().getTestStepList().each{ testStep ->					
					def testStepTemp = testStep.name
					def resultStep = ""
					if(testStepInclusionList.contains(testStepTemp)){
							def stepRunner = testRunner.runTestStepByName(testStepTemp)	
							try{System.sleep(5000)}catch(Exception e){}					
							if(stepRunner.status.toString() != 'PASS'){								
								resultStep = resultStep +" : Failed testStep = " + testStepTemp + " : Failed Reason" + stepRunner.getMessages().toString() + "\n "
								resultCase = resultCase  + resultStep								
							}else if('SKKOTransactionStatusValidation'.toUpperCase().equals(testStepTemp.toUpperCase())){
								def responseAsXml = context.expand( '${SKKOTransactionStatusValidation#ResponseAsXml#//Results}' )
								def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
								def response = groovyUtils.getXmlHolder(responseAsXml)
								ArrayList&lt;String> transanctionList= response.getNodeValues("//*:TRANSACTIONSID")								
								
								transanctionList.each{ trans ->
										def status = response.getNodeValue("//*:Row[TRANSACTIONSID='$trans']/PAYMENTSTATUS")
										if (!ExpectedStatus.contains(status.toString().toUpperCase())){
											resultStep = resultStep +" : Failed testStep = " + testStepTemp + " : Failed Reason: TRANSACTION- $trans having wrong status $status, Expected - $ExpectedStatus " + "\n "
											resultCase = resultCase  + resultStep
										}
								}
							}
					}					
			}
			if(resultCase.trim() != ""){
				resultCase = "\n************************FAILED TESTCASE DETAILS*********************\n"  + "Failed TestCase =" + testCaseNameTemp + "\n" + resultCase 
				resultSuite = resultSuite  +   resultCase	 + "\n"
				
			}
	
	}	
	
}

log.info "resultSuite error log-->" + resultSuite
if(resultSuite.trim() != "")
	assert false, resultSuite</script>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="SKKOTransactionStatusValidation" id="9bfb9a74-37ab-4f56-a18c-3e4a36e4dc4b" disabled="true">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>Database</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>SELECT TRANSACTIONSID,paymentstatus FROM transactions
WHERE TRANSACTIONSID in (${Properties#transactionsIds})
UNION
SELECT TRANSACTIONSID,paymentstatus FROM hst_transactions
WHERE TRANSACTIONSID in (${Properties#transactionsIds})</con:query>
      <con:storedProcedure>false</con:storedProcedure>
      <con:assertion type="JDBC Status" id="bb1ca995-a9fc-4c37-8ee7-27d14dcc1b74" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>map</con:name>
      <con:value>[a:a1, b:b2]</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>5381cf85-0f4b-4cb3-908b-fd81d738c6da</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>72ba828d-d1a7-48f8-b672-71288be2ad10</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>94085c43-2faf-427c-afc8-e1f78c1d1285</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cdcb5c32-dac5-4bb7-b37e-e89f6dc868b2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
