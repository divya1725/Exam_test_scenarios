<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="d9b81338-c898-45e5-af3c-9b4f6e17254d" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="BatchExecution_International" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="d9b81338-c898-45e5-af3c-9b4f6e17254dfileName">BatchExecution_International</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="Properties" id="ed86814b-b380-4bed-a009-0773823764cf">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>POR1OutputFile</con:name>
          <con:value>ppr-reservation_4201_20201228073646358.xml</con:value>
        </con:property>
        <con:property>
          <con:name>FTSLastModifiedDate</con:name>
          <con:value>1609137445</con:value>
        </con:property>
        <con:property>
          <con:name>FTSResponseFile</con:name>
          <con:value>pen_FILE_OF_RESERVATIONS_201228073737782.xml</con:value>
        </con:property>
        <con:property>
          <con:name>FTS_Destination_Masked</con:name>
          <con:value>FTS_V</con:value>
        </con:property>
        <con:property>
          <con:name>POR1LastModifiedTime</con:name>
          <con:value>1609137425</con:value>
        </con:property>
        <con:property>
          <con:name>marketType</con:name>
          <con:value>PM</con:value>
        </con:property>
        <con:property>
          <con:name>jobRunType</con:name>
          <con:value>NORMAL</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="setPORSchemaFree" id="6ebcdb86-68b1-4970-85e9-b8252acf0c05">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>Database</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>update CTL_BATCH_RUN_SCHEMA set STATUS = 'FREE' where SCHEMA_NAME in (select SCHEMA_NAME from CTL_BATCH_RUN_SCHEMA  order by START_TIMESTAMP asc fetch first 1 rows only)</con:query>
      <con:assertion type="JDBC Status" id="5a4aec68-6ce1-4ea9-a6c5-9c6aba3cfedd" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PORBatchJobRun" id="2e9b91d0-b31b-4f51-997f-58e46bd5aac8">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def marketType = context.expand( '${Properties#marketType}' )
marketType = marketType.toUpperCase()
def jobRunType = context.expand( '${Properties#jobRunType}' )
jobRunType = jobRunType.toUpperCase()

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)
log.info "$strHost|$strUsername|$strPassword|$intPort"
if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Running the batch...."

def nextDate =  new Date() ;
nextDate =java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyyyMMdd'))
//nextDate = nextDate.format("yyyy/MM/dd")
def runId = new Date()
//runId = runId.format("YYYY-MM-dd'T'HH:mm:ss.SSSSSSSSS")
runId=java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("YYYY-MM-dd'T'HH:mm:ss.SSSSSSSSS"))

//String shParameter = "pwhFraudRevalidationProcess.sh classpath:spring/pwh-fraud-revalidation-job-batch-context.xml pwhFraudRevalidationProcess paymentStatuses=\"RFDD,LAFU,TERE\" releaseDate=${nextDate} banksInProcess=\"4201\" 2>&amp;1"
String shParameter = "pwhDueDateProcessing.sh classpath:spring/pwh-due-date-job-batch-context.xml pwhDueDateProcessing processLine='PE_INT_OUT' paymentStatuses='RFDD,LAFU' releaseDate=$nextDate lastOfDay='false' porType='CompletePOR' banksInProcess='4201' 2>&amp;1"
String CommandOutPut = ServerConnect.execBatchCommand(env , "pin" ,shParameter)	


log.info "shParameter : "+shParameter
log.info "CommandOutput returned-->" + CommandOutPut
ServerConnect.closeConnection()
def porSuccessMessage1 = 'Spring Boot'
def porSuccessMessage2 ='Spring Boot'

assert (CommandOutPut.trim() != "" &amp;&amp; (CommandOutPut.contains(porSuccessMessage1) ||  CommandOutPut.contains(porSuccessMessage2))), "CommandLine OutPut having error!!, Executed command :" + CommandOutPut

String POR1LastModifiedTime = System.currentTimeMillis().toString().substring(0,10)
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("POR1LastModifiedTime","$POR1LastModifiedTime")</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay0" id="0c114a1e-e45e-440c-abe0-25ed38337193">
    <con:settings/>
    <con:config>
      <delay>10000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DownloadPOR1OutputFile" id="cc817d96-b5e6-42f4-9292-fcfa1b15d948">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def projectPath = testRunner.getTestCase().testSuite.project.getPath()
def marketType = context.expand( '${Properties#marketType}' )
marketType = marketType.toLowerCase()
String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

//String str = testRunner.testCase.getTestStepByName("Properties").getPropertyValue("POR1LastModifiedTime")
//int POR1LastModifiedTime = Integer.parseInt(str)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Downloading...."

String source = "/ebs/$env/pin/data/fts/reservation/out"
String destination = projectPath + File.separator + "data"

String POR1OutputFile = ""
try{
	POR1OutputFile = ServerConnect.getLatestFile(source,destination,0,log)
}catch(Exception ex){
	log.info "Error:" + ex
}

log.info "Uploading success!!  POR1OutputFile is $POR1OutputFile "
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("POR1OutputFile", POR1OutputFile)

ServerConnect.closeConnection()

assert POR1OutputFile != "", "FTS POR1OutputFile not created"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="UploadToFTS" id="c2830446-eb0b-4202-a28c-5889d90dabbb">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#FTSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def projectPath = testRunner.getTestCase().testSuite.project.getPath()

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Uploading to FTS server...."

String sourceFolder = projectPath + File.separator + "data"
String destination = "/tn/t2/fts/data/in/pe/earmarking/pen"
File Localfolder = new File(sourceFolder)
def latestFile = ""

//Get latestModified file from "ProjectPath//data// "folder

//long lastModified = 0
//Localfolder.listFiles().each{ file ->
//if (file.lastModified() > lastModified )
//	{
//		lastModified = file.lastModified()
//		latestFile = file.absolutePath
//	}
//}
//
//log.info "latestFile:" + latestFile
latestFile = sourceFolder + File.separator  + testRunner.testCase.getTestStepByName("Properties").getPropertyValue("POR1OutputFile")

try{
	ServerConnect.uploadFile(latestFile,destination)
}catch(Exception ex){
	log.info "Error:" + ex
}
String FTSLastModifiedDate = System.currentTimeMillis().toString().substring(0,10)
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("FTSLastModifiedDate","$FTSLastModifiedDate")

log.info "Uploading success!!"
ServerConnect.closeConnection()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay" id="6c4c3a80-41c8-44a3-831e-47dac53a601c">
    <con:settings/>
    <con:config>
      <delay>10000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="5a1deeb3-e9d4-428b-bebc-11473afc6b40" name="CAUCStartJob - RECEIVE_RESERVATION">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>CAUCJobSoapBinding</con:interface>
      <con:operation>CAUCStartJob</con:operation>
      <con:request name="CAUCStartJob - RECEIVE_RESERVATION" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" id="837df0b1-bb1c-4bb3-b011-975f26c8c97d" defaultOutgoingWss="" defaultIncomingWss="">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://${#Project#FTS_Masked_Batch_V}/fts/services/CAUCJobService</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v10">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>CAUC_TEST</wsc:SourceApplication>
         <wsc:DestinationApplication>${Properties#FTS_Destination_Masked}</wsc:DestinationApplication>
         <wsc:Function>RECEIVE_RESERVATION</wsc:Function>
         <wsc:ClientContext>
            <wsc:userid>CAUC</wsc:userid>
            <wsc:credentials>CAUC</wsc:credentials>
            <wsc:channel>NBA</wsc:channel>
            <wsc:orgid>1802</wsc:orgid>
            <wsc:orgunit>1802</wsc:orgunit>
            <wsc:customerid>CAUC</wsc:customerid>
            <wsc:ip>192.168.1.1</wsc:ip>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <CAUCStartJob xmlns="http://edb.com/ws/cauc">
         <Command>RECEIVE_RESERVATION</Command>
         <CommandLine>-JobId 1234 -Destination pen/ -ReturnUrl NO_REPLY</CommandLine>
      </CAUCStartJob>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="0b9c26bf-0756-4346-9574-dae202b2ae34" name="SOAP Response"/>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay2" id="83479f4e-177e-495e-98e9-2912a416d5f6">
    <con:settings/>
    <con:config>
      <delay>61000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="DownloadFTSResponseFile" id="c51ca238-f7d6-4b8b-921d-91638d06beb0">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#FTSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def projectPath = testRunner.getTestCase().testSuite.project.getPath()

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

String str = testRunner.testCase.getTestStepByName("Properties").getPropertyValue("FTSLastModifiedDate")
int FTSLastModifiedDate = Integer.parseInt(str)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Downloading from FTS!!...."

String source = "/tn/t2/fts/data/out/pe/earmarking/pen"
String destination = projectPath + File.separator + "data"

String FTSResponseFile = ""
try{
	FTSResponseFile = ServerConnect.getLatestFile(source,destination,FTSLastModifiedDate,log)
}catch(Exception ex){
	log.info "Error:" + ex
}

log.info "Downloading success!!  FTSResponseFile is $FTSResponseFile "
testRunner.testCase.getTestStepByName("Properties").setPropertyValue("FTSResponseFile", FTSResponseFile)

ServerConnect.closeConnection()

assert FTSResponseFile != "", "FTS ResponseFile not created"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="CopyFTSResponseToEBS" id="486c722f-0950-4494-a553-e0cd8e48cc8b">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
strUsername = strUsername.toLowerCase()
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def projectPath = testRunner.getTestCase().testSuite.project.getPath()

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Uploading to EBS  server...."

String sourceFolder = projectPath + File.separator + "data"
String destination = "/home/$strUsername"
File Localfolder = new File(sourceFolder)
def latestFile = ""

//Get latestModified file from "ProjectPath//data// "folder

//long lastModified = 0
//Localfolder.listFiles().each{ file ->
//if (file.lastModified() > lastModified )
//	{
//		lastModified = file.lastModified()
//		latestFile = file.absolutePath
//	}
//}
//
//log.info "latestFile:" + latestFile
latestFile = sourceFolder + File.separator  + testRunner.testCase.getTestStepByName("Properties").getPropertyValue("FTSResponseFile")
log.info "latestFile-->" + latestFile
try{
	log.info "upload to pOR2 is " + ServerConnect.uploadFile(latestFile,destination)
}catch(Exception ex){
	log.info "Error:" + ex
}

log.info "Uploading FTS res for POR2 success!!"
ServerConnect.closeConnection()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="CopyFileForPOR2" id="ed333438-c2d2-4791-b41f-663253840787">
    <con:settings/>
    <con:config>
      <script>def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )

String env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.toString().substring(2)

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

log.info "Copying file to POR2 folder...."

def por2FileName =  testRunner.testCase.getTestStepByName("Properties").getPropertyValue("FTSResponseFile")

String shParameter = "echo $strPassword | sudo -S su - pin$env -c \"cp /home/$strPassword/$por2FileName /ebs/$env/pin/pin-daemon/i1/target/fts/reservation/in/por2\""
String CommandOutPut = ServerConnect.execCommand(shParameter)		

log.info "shParameter : "+shParameter
log.info "CommandOutput returned-->" + CommandOutPut
ServerConnect.closeConnection()</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Groovy Script" id="10ac2045-e8f8-4bdf-865b-bded66b5137f" disabled="true">
    <con:settings/>
    <con:config>
      <script>//String str = testRunner.testCase.getTestStepByName("Properties").getPropertyValue("FTSLastModifiedDate")
//Long FTSLastModifiedDate = Long.parseLong(str)

//String FTSLastModifiedDate = System.currentTimeMillis().toString().substring(0,10)
//
//log.info Integer.parseInt(FTSLastModifiedDate)
//testRunner.testCase.getTestStepByName("Properties").setPropertyValue("FTSLastModifiedDate","$FTSLastModifiedDate")

//def now = new Date()-1;now.format("dd-MMM-yy")

//String POR1LastModifiedTime = System.currentTimeMillis().toString().substring(0,10)
//testRunner.testCase.getTestStepByName("Properties").setPropertyValue("POR1LastModifiedTime","$POR1LastModifiedTime")

//marketType = "bM".toUpperCase()</script>
    </con:config>
  </con:testStep>
  <con:setupScript>testCase.getTestStepByName("Properties").setPropertyValue("POR1OutputFile", "")
testCase.getTestStepByName("Properties").setPropertyValue("FTSLastModifiedDate", "")
testCase.getTestStepByName("Properties").setPropertyValue("FTSResponseFile", "")
testCase.getTestStepByName("Properties").setPropertyValue("POR1LastModifiedTime", "")</con:setupScript>
  <con:properties>
    <con:property>
      <con:name>map</con:name>
      <con:value>[a:a1, b:b2]</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>5381cf85-0f4b-4cb3-908b-fd81d738c6da</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>72ba828d-d1a7-48f8-b672-71288be2ad10</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>94085c43-2faf-427c-afc8-e1f78c1d1285</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>cdcb5c32-dac5-4bb7-b37e-e89f6dc868b2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f1cca34d-7c16-487f-a2bb-4a706de3531a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>54c926c4-5073-4beb-b8b2-ba4628702ae4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a539de08-b666-4fe9-9636-fb9b9eabba66</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>72c9e7e6-b833-4294-abcd-6c0481b897cd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>4f6afbce-b605-4838-a5fc-8d48dde99963</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>18f7d99a-6a92-4f29-bfbf-825cc01087fe</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>e4a54adb-f6f0-4532-9c90-3f755a97e3db</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ce642f55-9aab-4401-9507-7846f445c6d0</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>392ae598-956c-4426-8253-543059469364</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
