<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="397018ee-4f21-45aa-91d6-536efb663ccf" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Script_Add_Tag" searchProperties="true" timeout="0" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="397018ee-4f21-45aa-91d6-536efb663ccffileName">Script_Add_Tag</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="Add_WSDL_EndPoint" id="d5f32975-ced7-4765-8758-1e69d24a0785" disabled="true">
    <con:settings/>
    <con:config>
      <script>import testEnvironment.*;
detect  = new detectTestEnvironment();
envro   = context.testCase.testSuite.project.getActiveEnvironment().getName();
result  = detect.getDetailsOf(envro);
env = result[0];
eos_ip  = result[1];
getEnv= context.testCase.testSuite.project.getEnvironmentByName(envro);
if (envro != null &amp;&amp; getEnv != null)
{
    setEndPoint();
}
else
{
    log.info "Test Environment is not defined"
}
public void setEndPointFor(  wsdl_Definition, endPoint)
{
    wsdlSer = getEnv.getService(wsdl_Definition+"PortTypeSoap11", com.eviware.soapui.config.ServiceConfig.Type.Enum.forString("SOAP"));
    if (wsdlSer != null)
    {
        urlConf = wsdlSer.getEndpoint().getConfig();
        urlConf.setStringValue("http://"+eos_ip+"/pin/services/"+endPoint+"?wsdl");
    }
    else log.info "No WSDL Imported To Setup";
}
public void setEndPoint()
{
    //  Send in "WSDL name" and "End Point String" seperately as "String" might have "Service" in it but WSDL name will not always have it
    setEndPointFor("PAYSPaymentAuthorization_V1_0","PAYSPaymentAuthorization_V1_0");
    setEndPointFor("PAYSPaymentAuthorization_V1_1","PAYSPaymentAuthorization_V1_1");
    setEndPointFor("PAYSPaymentAuthorization_V1_2","PAYSPaymentAuthorization_V1_2");
    setEndPointFor("PINSPaymentAuthorization_V1_3","PINSPaymentAuthorization_V1_3");
    setEndPointFor("PAYSPaymentPredefinedCreditor_V1_0","PAYSPaymentPredefinedCreditor_V1_0");
    setEndPointFor("PINSPaymentPredefinedCreditor_V1_1","PINSPaymentPredefinedCreditor_V1_1");
    setEndPointFor("PAYSPaymentSearch_V1_2","PAYSPaymentSearch_V1_2");
    setEndPointFor("PINSPaymentSearch_V1_5","PINSPaymentSearch_V1_5");
    setEndPointFor("PINSPaymentSearch_V1_6","PINSPaymentSearch_V1_6");
    setEndPointFor("PINSPaymentSearch_V1_7","PINSPaymentSearch_V1_7Service");
    setEndPointFor("PINSPaymentSearch_V1_8","PINSPaymentSearch_V1_8");
    setEndPointFor("PINSPaymentSearch_V1_9","PINSPaymentSearch_V1_9");
    setEndPointFor("PINSPaymentSearch_V2_0","PINSPaymentSearch_V2_0");
    setEndPointFor("PAYSPaymentStatusUpdate_V1_0","PAYSPaymentStatusUpdate_V1_0");
    setEndPointFor("PAYSPaymentStatusUpdate_V1_1","PAYSPaymentStatusUpdate_V1_1");
    setEndPointFor("PINSPaymentStatusUpdate_V1_2","PINSPaymentStatusUpdate_V1_2Service");
    setEndPointFor("PINSPaymentStatusUpdate_V1_3","PINSPaymentStatusUpdate_V1_3Service");
    setEndPointFor("PINSPaymentStatusUpdate_V1_4","PINSPaymentStatusUpdate_V1_4Service");
    setEndPointFor("PINSPaymentStatusUpdate_V1_5","PINSPaymentStatusUpdate_V1_5");
    setEndPointFor("PINSPaymentStatusUpdate_V2_0","PINSPaymentStatusUpdate_V2_0");
    setEndPointFor("PAYSPayment_V1_4","PAYSPayment_V1_4");
    setEndPointFor("PINSPayment_V1_6","PINSPayment_V1_6");
    setEndPointFor("PINSPayment_V1_7","PINSPayment_V1_7Service");
    setEndPointFor("PINSPayment_V1_8","PINSPayment_V1_8Service");
    setEndPointFor("PINSPayment_V1_9","PINSPayment_V1_9");
    setEndPointFor("PINSPayment_V1_10","PINSPayment_V1_10");
    setEndPointFor("PINSPayment_V2_0","PINSPayment_V2_0");
    setEndPointFor("PINSPaymentAccountForecastSearch_V1","PINSPaymentAccountForecastSearch_V1");
    setEndPointFor("PINSPaymentAccountForecastSearch_V1_1","PINSPaymentAccountForecastSearch_V1_1");
    setEndPointFor("PINSPaymentUtil_V1_1","PINSPaymentUtil_V1_1");
    setEndPointFor("PINSPaymentUtil_V1_2","PINSPaymentUtil_V1_2");
    setEndPointFor("PINSPaymentUtil_V2_0","PINSPaymentUtil_V2_0");
    setEndPointFor("PINSStandingOrder_V1_1Service","PINSStandingOrder_V1_1Service");
    setEndPointFor("PINSStandingOrder_V1_2Service","PINSStandingOrder_V1_2Service");
    setEndPointFor("PINSStandingOrder_V1_3Service","PINSStandingOrder_V1_3Service");
    setEndPointFor("PINSStandingOrder_V1_4Service","PINSStandingOrder_V1_4Service");
    setEndPointFor("PINSStandingOrder_V1_5Service","PINSStandingOrder_V1_5Service");
    setEndPointFor("PINSStandingOrder_V2_0Service","PINSStandingOrder_V2_0Service");
    log.info "DONE..!!";
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCA_ALL" id="ccb5e808-5070-4324-8696-cb078cfe80d4" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCA tags for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCAPerformed = "SCAPerformed";
	SCALastPerformed = "SCALastPerformed";
	SCAExemptionType = "SCAExemptionType"

	for (splitString in splitRequest)
	{
		if (splitString.contains("<wsc:item key=\"SCAPerformed\""))
		{
			SCAPerformed = null;
		}
		if (splitString.contains("<wsc:item key=\"SCALastPerformed\""))
		{
			SCALastPerformed = null;
		}
		if (splitString.contains("<wsc:item key=\"SCAExemptionType\""))
		{
			SCAExemptionType = null;
		}
	}
	if(SCAPerformed == "SCAPerformed") 
	{
		addItems(SCAPerformed,stepName);
	}
	if(SCALastPerformed == "SCALastPerformed") 
	{
		addItems(SCALastPerformed,stepName);
	}
	if(SCAExemptionType == "SCAExemptionType")
	{
		addItems(SCAExemptionType);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAPerformed"		:	tagValue = "<wsc:item key=\"SCAPerformed\" value=\"false\"/>";
												break;
		case "SCALastPerformed"	:	tagValue = "<wsc:item key=\"SCALastPerformed\" value=\"2020-07-25 11:00:00\"/>";
												break;
		case "SCAExemptionType"	:	tagValue = "<wsc:item key=\"SCAExemptionType\" value=\"7516\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("<wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("<")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("</soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCAPerformed" id="471692f9-c4a3-46b3-86bf-762e86b0fd49" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCAPerformed tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCAPerformed = "SCAPerformed";		//	Set value

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCAPerformed\""))
		{
			SCAPerformed = null;					//	If tag is present, then set it as NULL and dont call addItems();
		}
	}
	if(SCAPerformed == "SCAPerformed") 
	{
		addItems(SCAPerformed);				//	if tag value is not null, then set the tag by calling addItems();
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAPerformed"	:	tagValue = "&lt;wsc:item key=\"SCAPerformed\" value=\"false\"/>";
												break;	//	Prepare tag value to insert
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))		//	Find the Payment Channel tag and Add SCA tags below it
		{
			tab = splitString.tokenize("&lt;")[0];	//	Find the Spacing Tabs of the Element
			newSplit = splitString + "\n" + tab + tagValue + '\n';					//	
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	//	if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCALastPerformed" id="34d96d24-a4d5-42ce-9d3a-975f0f5caf1f" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCALastPerformed tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCALastPerformed = "SCALastPerformed";

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCALastPerformed\""))
		{
			SCALastPerformed = null;
		}
	}
	if(SCALastPerformed == "SCALastPerformed") 
	{
		addItems(SCALastPerformed);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCALastPerformed"	:	tagValue = "&lt;wsc:item key=\"SCALastPerformed\" value=\"2020-07-25 11:00:00\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCAExemptionType" id="ac7d82a8-0b7f-4407-b8a2-e083413ae275" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCAExemptionType tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");

	SCAExemptionType = "SCAExemptionType"

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCAExemptionType\""))
		{
			SCAExemptionType = null;
		}
	}
	if(SCAExemptionType == "SCAExemptionType")
	{
		addItems(SCAExemptionType);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAExemptionType"	:	tagValue = "&lt;wsc:item key=\"SCAExemptionType\" value=\"7516\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_LogRef" id="89e3720c-1a0e-4beb-8d6f-35424f10e4f4" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting LogRef for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");

	LogRef = "LogRef";

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"LogRef\" value=\"\${=java.util.UUID.randomUUID().toString()}\"/>"))
		{
			LogRef = null;
		}
	}
	if(LogRef == "LogRef") 
	{
		addItems(LogRef);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "LogRef"		:	tagValue = "&lt;wsc:item key=\"LogRef\" value=\"\${=java.util.UUID.randomUUID().toString()}\"/>";
										break;
		default					:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key=\"LogRef\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = tab + tagValue + "\n";
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_BM-PaymentChannel" id="239cc469-ad5d-4e5c-a5e6-85c8bf68b864" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting LogRef for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");

	PaymentChannel = "PaymentChannel";

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))
		{
			PaymentChannel = null;
		}
	}
	if(PaymentChannel == "PaymentChannel") 
	{
		addItems(PaymentChannel);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "PaymentChannel"		:	tagValue = "&lt;wsc:item key=\"PaymentChannel\" value=\"BES\"/>";
													break;
		default								:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key="))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = tab + tagValue + "\n";
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:properties/>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>6d6f5555-19ab-4ca4-80d4-d43adb6ef315</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c710393d-0aea-46d4-9e87-9adeaaa2efcf</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d3f0e15c-8e43-4ba0-9a65-9153f976fafd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ed6bd724-dfe8-4ad6-9d58-0e1f669f3de5</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>64b6958f-7dfb-46a3-98f4-ba96ab33b4ae</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>06e19396-adc5-4fc5-ade1-c594d49bb038</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="31411996-3421-47a9-90cc-0e150c5f5aec">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
