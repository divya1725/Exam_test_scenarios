<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="bbdc05b7-94cc-421e-82ff-a10ec404d662" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="ValidatePAIN002File" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="bbdc05b7-94cc-421e-82ff-a10ec404d662fileName">ValidatePAIN002File</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="PreCondition" id="2fe9ea98-ef96-4b25-9658-44fd374482b4">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>userID</con:name>
          <con:value>TESTUSERPI28</con:value>
        </con:property>
        <con:property>
          <con:name>credentials</con:name>
          <con:value>03111012010400425kglPboRi3h16OVtVL1neI9CfuAtjCBO603eS0IgWm1WWIO7EfpSL4DE%2FlDFi69n1sSaabKNt2t%2BxJppso23a37Emmmyjbdrflpq4f56YEcTwqPbJGRxTVbEmmmyjbdrfsSaabKNt2t%2FXzlyjxYnxhcG46wcbIKp%2FsSaabKNt2t9wBUG0SyIoqFfig80Gq4uXVBtimDzTiu3EfQIWD5xMfpd8V90wfJqE%2FrpIdBWOZCg%3DWlPV5eZ4diuCWN8n8MioYhhi5y3ry7ocUG557FkHElWUtZW5y2o9bV4kNOBI2eIvhnMNNl4KZzZiP60aZOtzU6qC7h54%2FjtOS9LP2XwPBSwC3jUA00HIe25%2FFBsLnNciYlYLbkWKiTZCji3sjsSuUS8K0sIEsS3qoAJRWadlGrE%3D</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>channel</con:name>
          <con:value>NBA</con:value>
        </con:property>
        <con:property>
          <con:name>customerID</con:name>
          <con:value>08039417384</con:value>
        </con:property>
        <con:property>
          <con:name>agreementID</con:name>
          <con:value>08039417384</con:value>
        </con:property>
        <con:property>
          <con:name>TransactionID</con:name>
          <con:value>${#[PAIN002_AdviceBatch#PaymentCreate_BM_EVRYCPS#Properties]#transactionsID}</con:value>
        </con:property>
        <con:property>
          <con:name>SourcePath</con:name>
          <con:value>${#Project#sourcePath}</con:value>
        </con:property>
        <con:property>
          <con:name>Pain002SchemaPath</con:name>
          <con:value>C:\Ullasa\Projects\JenkinsRegression\V9_Master\V4\pr-regression-valuechain\PAIN002-Advice\data\pain.002.001.04.xsd</con:value>
        </con:property>
        <con:property>
          <con:name>Pain002_File</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.002.001.04">
    <CstmrPmtStsRpt>
        <GrpHdr>
            <MsgId>26124901374.11100.391715</MsgId>
            <CreDtTm>2021-01-04T14:26:29.304502Z</CreDtTm>
            <InitgPty>
                <Nm>SpareBank 1 SMN</Nm>
                <Id>
                    <OrgId>
                        <AnyBIC>SPTRNO22XXX</AnyBIC>
                        <Othr>
                            <Id>26124901374</Id>
                            <SchmeNm>
                                <Cd>BANK</Cd>
                            </SchmeNm>
                        </Othr>
                    </OrgId>
                </Id>
            </InitgPty>
            <DbtrAgt>
                <FinInstnId>
                    <ClrSysMmbId>
                        <ClrSysId>
                            <Prtry>NOBSK</Prtry>
                        </ClrSysId>
                        <MmbId>4201</MmbId>
                    </ClrSysMmbId>
                </FinInstnId>
            </DbtrAgt>
        </GrpHdr>
        <OrgnlGrpInfAndSts>
            <OrgnlMsgId>303010</OrgnlMsgId>
            <OrgnlMsgNmId>pain.001.001.04</OrgnlMsgNmId>
        </OrgnlGrpInfAndSts>
        <OrgnlPmtInfAndSts>
            <OrgnlPmtInfId>303010</OrgnlPmtInfId>
            <TxInfAndSts>
                <OrgnlInstrId>303010</OrgnlInstrId>
                <OrgnlEndToEndId>PAIN00204121075045</OrgnlEndToEndId>
                <TxSts>RJCT</TxSts>
                <StsRsnInf>
                    <Rsn>
                        <Cd>AC06</Cd>
                    </Rsn>
                    <AddtlInf>438700</AddtlInf>
                    <AddtlInf>F9758756003</AddtlInf>
                    <AddtlInf>KONTO ER BLOKKERT</AddtlInf>
                </StsRsnInf>
            </TxInfAndSts>
        </OrgnlPmtInfAndSts>
    </CstmrPmtStsRpt>
</Document>]]></con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchPain002Schema" id="bcddc8e6-b528-4b18-af75-fe3ecbbc7aaf">
    <con:settings/>
    <con:config>
      <script>//In case of camt54 xsd Filename is changed, property  camt54SchemaPath must be changed accordingly
def Pain002SchemaPath =testRunner.testCase.testSuite.getProject().getPath()   + File.separator +  "data" + File.separator + "pain.002.001.04.xsd"
log.info Pain002SchemaPath

Pain002SchemaPath = Pain002SchemaPath.replace("//","/")
testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("Pain002SchemaPath", Pain002SchemaPath)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="fetchJobID" id="902c554b-04c7-4898-b57a-43313d31d48f">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT 
*
FROM 
ADVICETRANSACTION 
WHERE 
FK_TRANSACTIONSID IN (${PreCondition#TransactionID})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="0b05e534-f3b6-490a-bf89-52f6e11c65b3" name="PIN_HstRead">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PIN_HstRead" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="107a076f-6bed-433f-b693-cd87cdf63eb3">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${#TestCase#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>${#TestCase#DestinationApplication}</wsc:DestinationApplication>
         <wsc:Function>paymentCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>E211732</wsc:userid>
            <wsc:credentials>${PreCondition#credentials}</wsc:credentials>
            <wsc:channel>${PreCondition#channel}</wsc:channel>
            <wsc:orgid>${PreCondition#orgid}</wsc:orgid>
            <wsc:customerid>${PreCondition#customerID}</wsc:customerid>
            <wsc:ip>${#TestCase#ip}</wsc:ip>
            <wsc:item key="Employee" value="E211732"/>
            <wsc:item key="SelfService" value="false"/>
            <wsc:item key="LogRef" value="a5c64f54-a6a9-4796-8a2c-35aeb2b3871c"/>
            <wsc:item key="PaymentChannel" value="ITR"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${PreCondition#TransactionID}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Simple Contains" id="f6c2a9dd-bc06-408f-88f6-7053c15647c9" name="Contains">
          <con:configuration>
            <token>&lt;Message>OK&lt;/Message></token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0/PINSPayment_V2_0PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="50463ace-515e-47d8-a5ec-c52a73e9374f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
          <con:entry environmentId="4b4c9850-86ff-48ce-bce0-7e16455b6aff">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="6acad59c-c71a-413d-ab76-7c4a794d0528">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="edf709aa-58f7-487c-a1b8-07d08a94a929">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="ed1e0db4-4b58-442d-baa9-df0a7795d8d7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="fbac4f6b-520b-4f85-9262-838a64a079b7">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchPain002FromServer" id="4bf1e65e-a61c-405f-8aa0-d390a98719fc">
    <con:settings/>
    <con:config>
      <script>// Properties
def  ebsHost = context.expand( '${#Project#EBSHost}' )
def  Port =  context.expand( '${#Project#Port}' );
def  ftpUsername = context.expand( '${#Project#UserName}' )
def  ftpPassword = context.expand( '${#Project#Password}' )
def DestinationPath=context.getTestCase().getTestSuite().getProject().getPath()+'\\data'
def  SourcePath = context.expand( '${PreCondition#SourcePath}' )

log.info 'Destination path '+DestinationPath;

def String JobID = context.expand( '${fetchJobID#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FK_JOBID[1]}' )
def String  MsgID = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:messageId[1]}' )
def String JobDate = context.expand( '${fetchJobID#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/ADVICEDATE[1]}' )

JobDate = JobDate.replaceAll("[^a-zA-Z0-9]", "");  
log.info JobDate;

def String FileName = "*."+JobID+"."+MsgID+"."+JobDate.take(12)+"*.xml";
log.info 'File Name is : '+FileName;

//Server connect
if (!(ServerConnect.Connect(ebsHost ,ftpUsername, ftpPassword, Integer.parseInt(Port)) == "PASS"))
	assert false," Failed to conenct to linux server!!"
else
 log.info "Connected to the server successfully!!"

//Find file using partial file name
String findName = "cd $SourcePath &amp;&amp; find . -name '$FileName'"
log.info findName;

//remove line space in file name
def File_Name = ServerConnect.execCommand(findName).replace("\n", "");

//Verify file name
if (File_Name.toString().isEmpty()==true)
{
	testRunner.fail();
	log.info "fetchPain002FromServer step failed, Unable to find the file in server!"
}
else
{
	 log.info 'FileName is  : '+File_Name;

	//Read file from server
	def Pain002_File = ServerConnect.readFileFromServer(SourcePath,File_Name);
	log.info Pain002_File
	
	testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("Pain002_File",Pain002_File);
}

//Server disconnect
if (!(ServerConnect.closeConnection()))
	assert false," Failed to close linux server!!"
else
 log.info "Connection closed successfully!!"</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay" id="17864982-11ce-4018-839c-4d16c284aa14">
    <con:settings/>
    <con:config>
      <delay>4000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="ADVICETRANSACTION" id="73667501-9469-4149-a6db-ec1453e00c89">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
ADVICETRANSACTION 
WHERE 
FK_TRANSACTIONSID IN (${PIN_HstRead#Response#declare namespace ns4='urn:pins.payment.evry.com:domain:paymentinitiation:v2_0'; declare namespace ns2='urn:pins.payment.evry.com:ws:paymentinitiation:v2_0'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:transactionId[1]})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="TRANSACTIONS" id="74a51997-7035-4c7f-8ae3-d6689b3ef65c">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
TRANSACTIONS
WHERE 
TRANSACTIONSID IN(${PIN_HstRead#Response#declare namespace ns4='urn:pins.payment.evry.com:domain:paymentinitiation:v2_0'; declare namespace ns2='urn:pins.payment.evry.com:ws:paymentinitiation:v2_0'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:transactionId[1]})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="PAYMENTINFO" id="4d271a21-b250-40f3-af20-d89e5c242686">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
PAYMENTINFO 
WHERE 
PAYMENTINFOID IN (${TRANSACTIONS#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FK_PAYMENTINFOID[1]})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="MESSAGE" id="f17bf8dc-b05b-4ad6-9ffa-2a2324c464d8">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
MESSAGE 
WHERE 
MESSAGEID IN (${PIN_HstRead#Response#declare namespace ns4='urn:pins.payment.evry.com:domain:paymentinitiation:v2_0'; declare namespace ns2='urn:pins.payment.evry.com:ws:paymentinitiation:v2_0'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:messageId[1]})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="AGENT_PAYMENTINFO" id="f0e037d6-ff3e-45f4-98bc-98c33a49cef0">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:pwhdata/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_d4)))</con:connectionString>
      <con:password>password</con:password>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
AGENT_PAYMENTINFO 
WHERE 
FK_PAYMENTINFOID IN (${TRANSACTIONS#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FK_PAYMENTINFOID[1]})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Schema Validation" id="b8e64f45-f090-4d1f-ba39-13be37f47501">
    <con:settings/>
    <con:config>
      <script>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
// Specify an XSD Schema
def xsdFilePath = context.expand( '${PreCondition#Pain002SchemaPath}' )
//log.info xsdFilePath;
// Get the response as XML
def XML_File = context.expand( '${PreCondition#Pain002_File}' )
// Create validation objects
def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
def schema = factory.newSchema(new StreamSource(xsdFilePath));
def validator = schema.newValidator();
// Validate the response against the schema
assert validator.validate(new StreamSource(new StringReader(XML_File))) == null;
//log.info 'schema validation end'</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PAIN002_Validation" id="d10b7721-4381-457e-bfe7-8e245033d37c">
    <con:settings/>
    <con:config>
      <script>def Pain002_File = context.expand( '${PreCondition#Pain002_File}' )
//log.info "Pain002_File :"+Pain002_File;

def XML = new XmlParser().parseText(Pain002_File)

//GrpHdr.MsgId
def MsgId_Actual = XML.CstmrPmtStsRpt.GrpHdr.MsgId.text();
def MessageID = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:messageId[1]}' )
def JobID = context.expand( '${ADVICETRANSACTION#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FK_JOBID[1]}' )
def CustomerID = context.expand( '${MESSAGE#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]}' )

def MessageID_Exp = CustomerID+'.'+JobID+'.'+MessageID;
assert MsgId_Actual==MessageID_Exp

//OrgId.BIC
def BIC_Actual = XML.CstmrPmtStsRpt.GrpHdr.InitgPty.Id.OrgId.AnyBIC.text();
def BIC_Exp = context.expand( '${MESSAGE#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIATINGPARTYBICFI[1]}' )

assert BIC_Exp==BIC_Actual;

//ClrSysId
def ClrSysId_Actual = XML.CstmrPmtStsRpt.GrpHdr.DbtrAgt.FinInstnId.ClrSysMmbId.ClrSysId.Prtry.text();

assert 'NOBSK'==ClrSysId_Actual;

//MmbId
def MmbId_Actual = XML.CstmrPmtStsRpt.GrpHdr.DbtrAgt.FinInstnId.ClrSysMmbId.MmbId.text();
def MmbId_Exp = context.expand( '${MESSAGE#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIATORBANKID[1]}' )

assert MmbId_Exp==MmbId_Actual;

if (MmbId_Actual=="4201")
{
	//InitgPty.Nm
	def InitgPty_Actual = XML.CstmrPmtStsRpt.GrpHdr.InitgPty.Nm.text();

	assert 'SpareBank 1 SMN'==InitgPty_Actual
}

//OrgnlMsgId
def OrgnlMsgId_Actual = XML.CstmrPmtStsRpt.OrgnlGrpInfAndSts.OrgnlMsgId.text();
def OrgnlMsgId_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:paymentIdentification[1]/ns5:messageIdentification[1]}' )

assert OrgnlMsgId_Exp==OrgnlMsgId_Actual;

//OrgnlMsgNmId
def OrgnlMsgNmId_Actual = XML.CstmrPmtStsRpt.OrgnlGrpInfAndSts.OrgnlMsgNmId.text();

assert 'pain.001.001.04'==OrgnlMsgNmId_Actual;

/*


*/

def pmtCount = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts.size();
//log.info "Total records in file : "+pmtCount;

for (def i=0;i&lt;pmtCount;i++)
{
	def transID = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[0].text();
	//log.info "Record "+i+" = "+transID

	if (transID==context.expand( '${PreCondition#TransactionID}' ))
		{
			//log.info "Identified matching record at array "+i;
			
			//OrgnlPmtInfId
			def OrgnlPmtInfId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].OrgnlPmtInfId.text();
			def OrgnlPmtInfId_Exp = context.expand( '${PAYMENTINFO#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PMTINFOID[1]}' )
			
			assert OrgnlPmtInfId_Exp==OrgnlPmtInfId_Actual;
			
			//OrgnlInstrId
			def OrgnlInstrId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.OrgnlInstrId.text();
			def OrgnlInstrId_Exp = context.expand( '${TRANSACTIONS#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INSTRUCTIONID[1]}' )
			
			assert OrgnlInstrId_Exp==OrgnlInstrId_Actual;
			
			//OrgnlEndToEndId
			def OrgnlEndToEndId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.OrgnlEndToEndId.text();
			def OrgnlEndToEndId_Exp = context.expand( '${TRANSACTIONS#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/ENDTOENDID[1]}' )
			
			assert OrgnlEndToEndId_Exp==OrgnlEndToEndId_Actual;
			
			//TxSts
			def TxSts_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.TxSts.text();
			
			assert 'RJCT'==TxSts_Actual;
			
			//StsRsnInf
			def StsRsnInf_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.Rsn.Cd.text();
			def StsRsnInf_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:code[1]}' )
			
			assert StsRsnInf_Exp==StsRsnInf_Actual;
			
			//AddtlInf-1
			def AddtlInf1_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[0].text();
			def AddtlInf1_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:transactionId[1]}' )
			
			assert AddtlInf1_Exp==AddtlInf1_Actual;
			
			//AddtlInf-2
			def AddtlInf2_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:additionalInfo[1]}' )
			
			if(AddtlInf2_Exp!="")
			{
				def AddtlInf2_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[1].text();
				assert AddtlInf2_Exp==AddtlInf2_Actual;
				
				//log.info "Verified Addtllnf2";
			}
			
			//AddtlInf-3
			def AddtlInf3_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:additionalInfo[2]}' )
			
			if(AddtlInf3_Exp!="")
			{
				def AddtlInf3_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[2].text();
				assert AddtlInf3_Exp==AddtlInf3_Actual;
				
				//log.info "Verified Addtllnf3";
			}
			break;
		}
}</script>
    </con:config>
  </con:testStep>
  <con:setupScript>assert (testCase.testSuite.getPropertyValue("TestSuiteResult") != "FAIL")</con:setupScript>
  <con:tearDownScript/>
  <con:properties>
    <con:property>
      <con:name>SourceApplication</con:name>
      <con:value>EVRYCPS</con:value>
    </con:property>
    <con:property>
      <con:name>DestinationApplication</con:name>
      <con:value>PINS</con:value>
    </con:property>
    <con:property>
      <con:name>ip</con:name>
      <con:value>10.235.84.79</con:value>
    </con:property>
    <con:property>
      <con:name>orgunit</con:name>
      <con:value>CORP</con:value>
    </con:property>
    <con:property>
      <con:name>requestedExecutionDate</con:name>
      <con:value>2020-05-11+05:00</con:value>
    </con:property>
    <con:property>
      <con:name>SessionID</con:name>
      <con:value>20200511694</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>e7d0cf6c-ff26-40de-9ae2-3a3fe5c69e36</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>88beb3b8-3a11-4c79-99a8-4d5d7182fc48</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>575c1fff-2018-4c87-bde6-12b95e3b1255</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>85f7636a-fd28-44aa-89c5-5ece3216290d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3fd09ccc-13ea-47c8-8b94-4cc80eb8a71c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f3f186ac-87e4-48ac-ac3c-2c478768a58e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d204c74c-1b29-4b35-b971-f64934034482</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>658df31d-91d4-4ce4-8ce9-29e33be94e01</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b1f36393-d563-4bb3-8830-82a44ca085ce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b2d34739-fb24-484b-b92c-1c3e5e4da21b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>5f931b50-81c4-4ab9-8e26-48e07b3a82e6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>44fcbede-ad8b-4bd0-bc14-99c9643e4a1e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>db2af29f-df1b-4c7a-a5a7-251d610f6149</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>854c2d27-58e2-4824-9cf5-16bb46f23b02</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:tagId>6f0ef37a-140d-4b22-97e1-3dec36d0843b</con:tagId>
</con:testCase>
