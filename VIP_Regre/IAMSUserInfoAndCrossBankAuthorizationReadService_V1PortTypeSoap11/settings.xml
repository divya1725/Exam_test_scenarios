<?xml version="1.0" encoding="UTF-8"?>
<con:interface xsi:type="con:WsdlInterface" id="67844bb9-31a6-45ee-aafa-3e7bfd5a3224" wsaVersion="NONE" name="IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11" type="wsdl" bindingName="{urn:srv.eam.security.fs.evry.com:ws:userinfoandcrossbankauthorizationread:v1}IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11" soapVersion="1_1" anonymous="optional" definition="http://10.246.89.245:10310/eam-server/services/IAMSUserInfoAndCrossBankAuthorizationReadService_V1?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="67844bb9-31a6-45ee-aafa-3e7bfd5a3224fileName">IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11</con:setting>
  </con:settings>
  <con:definitionCache type="TEXT" rootPart="http://10.246.89.245:10310/eam-server/services/IAMSUserInfoAndCrossBankAuthorizationReadService_V1?wsdl">
    <con:part>
      <con:url>http://10.246.89.245:10310/eam-server/services/IAMSUserInfoAndCrossBankAuthorizationReadService_V1?wsdl</con:url>
      <con:content><![CDATA[<wsdl:definitions targetNamespace="urn:srv.eam.security.fs.evry.com:ws:userinfoandcrossbankauthorizationread:v1" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="urn:srv.eam.security.fs.evry.com:ws:userinfoandcrossbankauthorizationread:v1" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:sch3="urn:srv.eam.security.fs.evry.com:domain:userinfoandcrossbankauthorizationread:v1" xmlns:sch2="urn:srv.eam.security.fs.evry.com:domain:common:v1" xmlns:sch1="http://edb.com/ws/WSCommon_v21" xmlns:sch0="urn:srv.eam.security.fs.evry.com:ws:userinfoandcrossbankauthorizationread:v1">
  <wsdl:types>
    <schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:srv.eam.security.fs.evry.com:ws:userinfoandcrossbankauthorizationread:v1" xmlns:userinfoandcrossbankauthorizationread="urn:srv.eam.security.fs.evry.com:domain:userinfoandcrossbankauthorizationread:v1" xmlns:edbheader="http://edb.com/ws/WSCommon_v21" xmlns:common="urn:srv.eam.security.fs.evry.com:domain:common:v1" xmlns="http://www.w3.org/2001/XMLSchema">
      <annotation>
        <documentation>Common error codes:
            0 - OK
            65 - Invalid ApplicationId used. It does not exist in EAM.
            67 - Bank does not exist in EAM.
            68 - User does not exist in EAM.
            69 - User was expired in EAM. No authorizations will be returned.
            70 - Technical error</documentation>
      </annotation>
      <import namespace="http://edb.com/ws/WSCommon_v21"/>
      <import namespace="urn:srv.eam.security.fs.evry.com:domain:userinfoandcrossbankauthorizationread:v1"/>
      <import namespace="urn:srv.eam.security.fs.evry.com:domain:common:v1"/>
      <element name="userInfoAndCrossBankAuthorizationReadRequest" type="tns:userInfoAndCrossBankAuthorizationReadRequest"/>
      <element name="userInfoAndCrossBankAuthorizationReadResponse" type="tns:userInfoAndCrossBankAuthorizationReadResponse"/>
      <element name="userInfoAndCrossBankAuthorizationReadFault" type="common:responseStateCodedFault"/>
      <complexType name="responseStateCodedFault">
        <annotation>
          <documentation>Generic SoapFault type</documentation>
        </annotation>
        <sequence>
          <element name="responseState" type="edbheader:ResponseStateType">
            <annotation>
              <documentation>Contains the distinct error-code and additional information on the actual error.</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="userInfoAndCrossBankAuthorizationReadResponse">
        <annotation>
          <documentation>Response containing all roles and permissions the user is assigned on his/her bank for the given application.
                            If user does not exist in EAM, the global permissions is returned due to anonymous user authorization requirement.</documentation>
        </annotation>
        <complexContent>
          <extension base="common:baseResponseType">
            <sequence>
              <sequence>
                <element name="userInfo" type="userinfoandcrossbankauthorizationread:userInfoType"/>
                <element maxOccurs="unbounded" minOccurs="0" name="RoleNameList" type="string"/>
                <element maxOccurs="unbounded" minOccurs="0" name="PermissionNameList" type="string"/>
              </sequence>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="userInfoAndCrossBankAuthorizationReadRequest">
        <annotation>
          <documentation>Get EAM  authorizations for given application for given user belonging to given bank.
                Includes cross-bank-roles and restrictions-on-roles.</documentation>
        </annotation>
        <sequence>
          <element ref="userinfoandcrossbankauthorizationread:application"/>
        </sequence>
      </complexType>
    </schema>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://edb.com/ws/WSCommon_v21" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://edb.com/ws/WSCommon_v21">
      <xsd:complexType name="ClientContextType">
        <xsd:sequence>
          <xsd:element name="userid" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Identifies the person who initiated the action This could either be the customer itself in a netbank) or an employee</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="credentials" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Authorization data. This is typically a security Object retriewed from a logon, but can also be a plain password.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="channel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Indicated what type of application that initiated the request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="orgid" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The OrganizationalId - will in a banking context be Financial Institution / Konsernnr</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="orgunit" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The Organizational unit will in a banking context be Branch / Registernr</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="customerid" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Id of the customer on which the operation is requested, may be the same as userid, but may well be different</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="locale" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Locale in a java syntax e.g "en_EN". May be used if application supports localized response</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ip" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>The ip adress of the client</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="itemType">
            <xsd:annotation>
              <xsd:documentation>Optionnal extention items - Add key/value pairs for application specific extentions</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="itemType">
        <xsd:attribute name="key" type="xsd:string" use="required"/>
        <xsd:attribute name="value" type="xsd:string" use="required"/>
      </xsd:complexType>
      <xsd:complexType name="EDBHeaderType">
        <xsd:sequence>
          <xsd:element name="SourceApplication" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Identifies the source that initiated the message. Used to separate different service consumers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="DestinationApplication" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Identifies the destination of the message. Used to separate different service providers.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Function" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Identifies the service to be called.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Version" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Service version "X.Y.Z" according to this standard:
                X = Main release (major changes, not necessarily backwards compatible)
                Y = Minor release (backwards compatible, new functionality)
                Z = Bugfix (backwards compatible, error correction only)</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ClientContext" type="ClientContextType">
            <xsd:annotation>
              <xsd:documentation>Elements for identifying client context information.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="AutHeader" type="EDBHeaderType"/>
      <xsd:complexType name="ResponseStateType">
        <xsd:sequence>
          <xsd:element name="ErrorCode" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Numeric error code reported for this error.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Severity" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Response Status Severity Code</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="ComponentId" type="xsd:int">
            <xsd:annotation>
              <xsd:documentation>Unique code identifying the component returning the service response</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="StrErrorCode" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Deprecated: Error code represented as String</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Message" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Message describing the error. Default is english language. Optionally localized according to the locale parameter in the service request</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="NativeError" nillable="true" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation>Deprecated: Optional detailed error information reported from involved components. Used for diagnostics purposes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element minOccurs="0" name="LogSequence" nillable="true" type="xsd:long">
            <xsd:annotation>
              <xsd:documentation>Optional key generated to be used for log correlation purposes.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" name="errorItem" nillable="true" type="errorItemType">
            <xsd:annotation>
              <xsd:documentation>Optional extention items - key/value pairs are used for extented error inforamtion.</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="errorItemType">
        <xsd:annotation/>
        <xsd:attribute name="key" type="xsd:string" use="required"/>
        <xsd:attribute name="value" type="xsd:string" use="required"/>
      </xsd:complexType>
    </xsd:schema>
    <schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:srv.eam.security.fs.evry.com:domain:common:v1" xmlns:edbheader="http://edb.com/ws/WSCommon_v21" xmlns:common="urn:srv.eam.security.fs.evry.com:domain:common:v1" xmlns="http://www.w3.org/2001/XMLSchema">
      <annotation>
        <documentation>Common type definitions.</documentation>
      </annotation>
      <import namespace="http://edb.com/ws/WSCommon_v21"/>
      <complexType name="responseStateCodedFault">
        <annotation>
          <documentation>Generic SoapFault type</documentation>
        </annotation>
        <sequence>
          <element name="responseState" type="edbheader:ResponseStateType">
            <annotation>
              <documentation>Contains the distinct error-code and additional
						information on the actual error.</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <simpleType name="pageLengthType">
        <annotation>
          <documentation>An type capable of describing a segments length or
				wished length</documentation>
        </annotation>
        <restriction base="int">
          <minInclusive value="0"/>
          <maxInclusive value="500"/>
        </restriction>
      </simpleType>
      <simpleType name="pageIndexType">
        <annotation>
          <documentation>Index of segment start</documentation>
        </annotation>
        <restriction base="int">
          <minInclusive value="0"/>
        </restriction>
      </simpleType>
      <complexType name="pagingInputElementType">
        <annotation>
          <documentation>Describes a paging segment</documentation>
        </annotation>
        <sequence>
          <element name="startIndex" type="common:pageIndexType"/>
          <element name="pageSize" type="common:pageLengthType"/>
        </sequence>
      </complexType>
      <complexType name="pagingOutputElementType">
        <annotation>
          <documentation>Describes the returned segment</documentation>
        </annotation>
        <sequence>
          <element name="numberOfElements" type="common:pageLengthType">
            <annotation>
              <documentation>Number of elements returned</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType abstract="true" name="pageResultType">
        <annotation>
          <documentation>Wraps paging and data elements</documentation>
        </annotation>
        <sequence>
          <element name="pagingOutput" type="common:pagingOutputElementType"/>
          <element name="elements">
            <complexType>
              <sequence>
                <any namespace="##other"/>
              </sequence>
            </complexType>
          </element>
        </sequence>
      </complexType>
      <simpleType name="generatedPkType">
        <annotation>
          <documentation>Generated primary key in database</documentation>
        </annotation>
        <restriction base="long"/>
      </simpleType>
      <simpleType name="optimisticLockVersionType">
        <annotation>
          <documentation>Version counter field used for optimistic locking
				See:
				http://en.wikipedia.org/wiki/Optimistic_concurrency_control
				This
				ensures data consistency when data travels across
				layers.</documentation>
        </annotation>
        <restriction base="long"/>
      </simpleType>
      <complexType abstract="true" name="basePersistentEntityType">
        <sequence>
          <element minOccurs="0" name="pk" type="common:generatedPkType">
            <annotation>
              <documentation>Bearer of the primary key.
						Not present for an
						non-persisted entity.</documentation>
            </annotation>
          </element>
          <element minOccurs="0" name="version" type="common:optimisticLockVersionType">
            <annotation>
              <documentation>The optimistic locking version field.
						Not present for
						an non-persisted entity.</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType abstract="true" name="baseResponseType">
        <annotation>
          <documentation>Base response type which all services should extend
				off</documentation>
        </annotation>
        <sequence>
          <element name="ResponseState" type="edbheader:ResponseStateType">
            <annotation>
              <documentation>The response state which describes the outcome of
						calling the service.</documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <simpleType name="max3StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="3"/>
        </restriction>
      </simpleType>
      <simpleType name="max5StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="5"/>
        </restriction>
      </simpleType>
      <simpleType name="max9StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="9"/>
        </restriction>
      </simpleType>
      <simpleType name="max16StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
				It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="16"/>
        </restriction>
      </simpleType>
      <simpleType name="max10StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="10"/>
        </restriction>
      </simpleType>
      <simpleType name="max20StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="20"/>
        </restriction>
      </simpleType>
      <simpleType name="max25StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="25"/>
        </restriction>
      </simpleType>
      <simpleType name="max35StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="35"/>
        </restriction>
      </simpleType>
      <simpleType name="max50StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="50"/>
        </restriction>
      </simpleType>
      <simpleType name="max61StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
                It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="61"/>
        </restriction>
      </simpleType>
      <simpleType name="max100StringType">
        <annotation>
          <documentation>This is just a restriction chosen which fits the persistence model.
				It has no business meaning as such, and is just chosen as a way to limit strings that are not otherwise restricted by some business means.</documentation>
        </annotation>
        <restriction base="string">
          <maxLength value="100"/>
        </restriction>
      </simpleType>
    </schema>
    <schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="urn:srv.eam.security.fs.evry.com:domain:userinfoandcrossbankauthorizationread:v1" xmlns:userinfoandcrossbankauthorizationread="urn:srv.eam.security.fs.evry.com:domain:userinfoandcrossbankauthorizationread:v1" xmlns:common="urn:srv.eam.security.fs.evry.com:domain:common:v1" xmlns="http://www.w3.org/2001/XMLSchema">
      <annotation>
        <documentation>Types in the userInfoAndCrossBankAuthorizationRead domain</documentation>
      </annotation>
      <import namespace="urn:srv.eam.security.fs.evry.com:domain:common:v1"/>
      <element name="userId" type="common:max16StringType">
        <annotation>
          <documentation>LogonID/UserID which has been granted authorizations in EAM Admin Client</documentation>
        </annotation>
      </element>
      <element name="application" type="common:max20StringType">
        <annotation>
          <documentation>Application ID in EAM Server</documentation>
        </annotation>
      </element>
      <element name="logonId" type="common:max50StringType">
        <annotation>
          <documentation>User logonId</documentation>
        </annotation>
      </element>
      <element name="firstName" type="common:max50StringType">
        <annotation>
          <documentation>The users name</documentation>
        </annotation>
      </element>
      <element name="lastName" type="common:max50StringType">
        <annotation>
          <documentation>The users name</documentation>
        </annotation>
      </element>
      <element name="portfolioCode" type="common:max5StringType">
        <annotation>
          <documentation>The users portfolio code</documentation>
        </annotation>
      </element>
      <element name="initials" type="common:max5StringType">
        <annotation>
          <documentation>The users initials</documentation>
        </annotation>
      </element>
      <element name="userEmail" type="common:max50StringType">
        <annotation>
          <documentation>Users E-mail</documentation>
        </annotation>
      </element>
      <element name="userPhoneNo" type="common:max25StringType">
        <annotation>
          <documentation>User phone number</documentation>
        </annotation>
      </element>
      <element name="userCountryCode" type="common:max10StringType">
        <annotation>
          <documentation>Users country code</documentation>
        </annotation>
      </element>
      <element name="vipLabels" type="common:max50StringType">
        <annotation>
          <documentation>Vip labels</documentation>
        </annotation>
      </element>
      <element name="orgId" type="common:max25StringType">
        <annotation>
          <documentation>Concern bank register number</documentation>
        </annotation>
      </element>
      <element name="companyName" type="common:max100StringType">
        <annotation>
          <documentation>Company name</documentation>
        </annotation>
      </element>
      <element name="companyEmail" type="common:max50StringType">
        <annotation>
          <documentation>Company E-mail</documentation>
        </annotation>
      </element>
      <element name="roleName" type="common:max50StringType">
        <annotation>
          <documentation>Name of Authorization role belonging to a bank</documentation>
        </annotation>
      </element>
      <element name="roleOrgId" type="common:max25StringType">
        <annotation>
          <documentation>Organization number in EAM for the bank who owns the role</documentation>
        </annotation>
      </element>
      <complexType name="userInfoType">
        <annotation>
          <documentation>Information about the user</documentation>
        </annotation>
        <sequence>
          <element ref="userinfoandcrossbankauthorizationread:logonId"/>
          <element minOccurs="0" ref="userinfoandcrossbankauthorizationread:firstName"/>
          <element minOccurs="0" ref="userinfoandcrossbankauthorizationread:lastName"/>
          <element minOccurs="0" ref="userinfoandcrossbankauthorizationread:portfolioCode"/>
          <element minOccurs="0" ref="userinfoandcrossbankauthorizationread:userCountryCode"/>
          <element ref="userinfoandcrossbankauthorizationread:orgId"/>
          <element minOccurs="0" ref="userinfoandcrossbankauthorizationread:companyName"/>
        </sequence>
      </complexType>
    </schema>
  </wsdl:types>
  <wsdl:message name="userInfoAndCrossBankAuthorizationReadResponse">
    <wsdl:part element="tns:userInfoAndCrossBankAuthorizationReadResponse" name="userInfoAndCrossBankAuthorizationReadResponse"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userInfoAndCrossBankAuthorizationReadFault">
    <wsdl:part element="tns:userInfoAndCrossBankAuthorizationReadFault" name="userInfoAndCrossBankAuthorizationReadFault"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="userInfoAndCrossBankAuthorizationReadRequest">
    <wsdl:part element="sch1:AutHeader" name="SoapHeader"></wsdl:part>
    <wsdl:part element="tns:userInfoAndCrossBankAuthorizationReadRequest" name="userInfoAndCrossBankAuthorizationReadRequest"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortType">
    <wsdl:operation name="userInfoAndCrossBankAuthorizationRead">
      <wsdl:input message="tns:userInfoAndCrossBankAuthorizationReadRequest" name="userInfoAndCrossBankAuthorizationReadRequest"></wsdl:input>
      <wsdl:output message="tns:userInfoAndCrossBankAuthorizationReadResponse" name="userInfoAndCrossBankAuthorizationReadResponse"></wsdl:output>
      <wsdl:fault message="tns:userInfoAndCrossBankAuthorizationReadFault" name="userInfoAndCrossBankAuthorizationReadFault"></wsdl:fault>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11" type="tns:IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="userInfoAndCrossBankAuthorizationRead">
      <soap:operation soapAction=""/>
      <wsdl:input name="userInfoAndCrossBankAuthorizationReadRequest">
        <soap:header message="tns:userInfoAndCrossBankAuthorizationReadRequest" part="SoapHeader" use="literal"></soap:header>
        <soap:body parts="userInfoAndCrossBankAuthorizationReadRequest" use="literal"/>
      </wsdl:input>
      <wsdl:output name="userInfoAndCrossBankAuthorizationReadResponse">
        <soap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="userInfoAndCrossBankAuthorizationReadFault">
        <soap:fault name="userInfoAndCrossBankAuthorizationReadFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="IAMSUserInfoAndCrossBankAuthorizationReadService_V1">
    <wsdl:port binding="tns:IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11" name="IAMSUserInfoAndCrossBankAuthorizationReadService_V1PortTypeSoap11">
      <soap:address location="http://10.246.89.245:10310/eam-server/services/IAMSUserInfoAndCrossBankAuthorizationReadService_V1"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content>
      <con:type>http://schemas.xmlsoap.org/wsdl/</con:type>
    </con:part>
  </con:definitionCache>
  <con:endpoints>
    <con:endpoint>http://10.246.89.245:10310/eam-server/services/IAMSUserInfoAndCrossBankAuthorizationReadService_V1</con:endpoint>
    <con:endpoint>http://localhost:8093/</con:endpoint>
  </con:endpoints>
</con:interface>
