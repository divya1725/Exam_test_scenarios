<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="7c387bb5-32f7-4560-8b3d-9d859e04749d" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Pain002ValidationFromMQFilePayment" searchProperties="true" timeout="0" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="92eca128-86c2-4ad3-bb6c-41c60d6b4c75fileName">Pain002ValidationFromMQFilePayment</con:setting>
    <con:setting id="7c387bb5-32f7-4560-8b3d-9d859e04749dfileName">Pain002ValidationFromMQFilePayment</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="PreCondition" id="168411b1-4708-46af-8a34-689622056ee9">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>userID</con:name>
          <con:value>e213476</con:value>
        </con:property>
        <con:property>
          <con:name>credentials</con:name>
          <con:value>03111012010400425kglPboRi3h16OVtVL1neI9CfuAtjCBO603eS0IgWm1WWIO7EfpSL4DE%2FlDFi69n1sSaabKNt2t%2BxJppso23a37Emmmyjbdrflpq4f56YEcTwqPbJGRxTVbEmmmyjbdrfsSaabKNt2t%2FXzlyjxYnxhcG46wcbIKp%2FsSaabKNt2t9wBUG0SyIoqFfig80Gq4uXVBtimDzTiu3EfQIWD5xMfpd8V90wfJqE%2FrpIdBWOZCg%3DWlPV5eZ4diuCWN8n8MioYhhi5y3ry7ocUG557FkHElWUtZW5y2o9bV4kNOBI2eIvhnMNNl4KZzZiP60aZOtzU6qC7h54%2FjtOS9LP2XwPBSwC3jUA00HIe25%2FFBsLnNciYlYLbkWKiTZCji3sjsSuUS8K0sIEsS3qoAJRWadlGrE%3D</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>channel</con:name>
          <con:value>INT</con:value>
        </con:property>
        <con:property>
          <con:name>customerID</con:name>
          <con:value>${#TestSuite#customerid}</con:value>
        </con:property>
        <con:property>
          <con:name>agreementID</con:name>
          <con:value>600685</con:value>
        </con:property>
        <con:property>
          <con:name>TransactionID</con:name>
          <con:value>260211577</con:value>
        </con:property>
        <con:property>
          <con:name>SourcePath</con:name>
          <con:value>/ebs/d4/pin/data/cps/advice/p02/out/</con:value>
        </con:property>
        <con:property>
          <con:name>Pain002SchemaPath</con:name>
          <con:value>C:\Ullasa\Projects\JenkinsRegression\V5_FraudRevalidation\V5_ReceiptOrder\pr-regression-valuechain\PAIN002Advice\data\pain.002.001.04.xsd</con:value>
        </con:property>
        <con:property>
          <con:name>Pain002_File</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.002.001.04">
    <CstmrPmtStsRpt>
        <GrpHdr>
            <MsgId>600685.37659.421620</MsgId>
            <CreDtTm>2020-09-15T16:25:17.593+02:00</CreDtTm>
            <InitgPty>
                <Nm>Vin fjerner co.</Nm>
                <Id>
                    <OrgId>
                        <AnyBIC>SPTRNO22XXX</AnyBIC>
                        <Othr>
                            <Id>600685</Id>
                            <SchmeNm>
                                <Cd>BANK</Cd>
                            </SchmeNm>
                        </Othr>
                    </OrgId>
                </Id>
            </InitgPty>
        </GrpHdr>
        <OrgnlGrpInfAndSts>
            <OrgnlMsgId>pain002_15920075503</OrgnlMsgId>
            <OrgnlMsgNmId>pain.001.001.04</OrgnlMsgNmId>
        </OrgnlGrpInfAndSts>
        <OrgnlPmtInfAndSts>
            <OrgnlPmtInfId>pain002_15920075503.P1</OrgnlPmtInfId>
            <TxInfAndSts>
                <OrgnlInstrId>pain002_15920075503.T4</OrgnlInstrId>
                <OrgnlEndToEndId>pain002_15920075503.T4</OrgnlEndToEndId>
                <TxSts>RJCT</TxSts>
                <StsRsnInf>
                    <AddtlInf>260211577</AddtlInf>
                </StsRsnInf>
                <StsRsnInf>
                    <Rsn>
                        <Cd>AC03</Cd>
                    </Rsn>
                    <AddtlInf>Invalid creditor account number length</AddtlInf>
                </StsRsnInf>
            </TxInfAndSts>
        </OrgnlPmtInfAndSts>
    </CstmrPmtStsRpt>
</Document>]]></con:value>
        </con:property>
        <con:property>
          <con:name>messageId</con:name>
          <con:value>421620</con:value>
        </con:property>
        <con:property>
          <con:name>paymentInfoId</con:name>
          <con:value>469077</con:value>
        </con:property>
        <con:property>
          <con:name>bankId</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>${#TestSuite#accountNumber}</con:value>
        </con:property>
        <con:property>
          <con:name>dueDate</con:name>
          <con:value>${= java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}</con:value>
        </con:property>
        <con:property>
          <con:name>msgID</con:name>
          <con:value>pain002_15920075503</con:value>
        </con:property>
        <con:property>
          <con:name>messageToSendGeneral</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><Wrapper xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:pin.payment.edb.com:authpain001wrapper:v1_0" ><auth><![CDATA[<?xml version="1.0" encoding="UTF-8"?><AgreementAuthorizationRequest><authRequest><agreementData><agreementId>600685</agreementId><bankId>BANKID</bankId><userId>CUSTOMERID</userId><userFirstName>Ext.Telepay</userFirstName><userLastName>EvryFileArchive</userLastName><userIdType>EXTU</userIdType><productID>0</productID><organizationId>921095899</organizationId><preapproved>true</preapproved><rejectionLevel>TRANSACTION</rejectionLevel><origin>PAYMUL</origin></agreementData><agreementAccount><accountNumber>ACCOUNTID</accountNumber><swiftAdress>SPTRNO22XXX</swiftAdress><currencyCode>NOK</currencyCode><accountType>CoreAccount</accountType><access>CREDIT_AND_DEBIT</access><bookingLevel>D</bookingLevel><approvalLimit>10000000</approvalLimit><registerLimit>10000000</registerLimit><numberOfVerifiers>0</numberOfVerifiers><numberOfApprovers>0</numberOfApprovers></agreementAccount><metaInformation><receivedTimestamp>DATET00:05:37</receivedTimestamp></metaInformation></authRequest></AgreementAuthorizationRequest>]]]]>><![CDATA[</auth><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?><Document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04"><CstmrCdtTrfInitn><GrpHdr><MsgId>TIMESTAMP</MsgId><CreDtTm>DATET00:06:27.355+02:00</CreDtTm><NbOfTxs>1</NbOfTxs><CtrlSum>10.00</CtrlSum><InitgPty><Nm>Vin fjerner co.</Nm><Id><OrgId><AnyBIC>SPTRNO22XXX</AnyBIC><Othr><Id>600685</Id><SchmeNm><Cd>BANK</Cd></SchmeNm></Othr></OrgId></Id></InitgPty></GrpHdr><PmtInf><PmtInfId>TIMESTAMP.P1</PmtInfId><PmtMtd>TRF</PmtMtd><NbOfTxs>1</NbOfTxs><CtrlSum>10.00</CtrlSum><PmtTpInf><InstrPrty>NORM</InstrPrty></PmtTpInf><ReqdExctnDt>DATE</ReqdExctnDt><Dbtr><Id><OrgId><Othr><Id>921095899</Id></Othr></OrgId></Id></Dbtr><DbtrAcct><Id><Othr><Id>ACCOUNTID</Id><SchmeNm><Cd>BBAN</Cd></SchmeNm></Othr></Id></DbtrAcct><DbtrAgt><FinInstnId><BICFI>SPTRNO22XXX</BICFI></FinInstnId></DbtrAgt><ChrgBr>SHAR</ChrgBr><CdtTrfTxInf><PmtId><InstrId>TIMESTAMP.T4</InstrId><EndToEndId>TIMESTAMP.T4</EndToEndId></PmtId><PmtTpInf><InstrPrty>NORM</InstrPrty><CtgyPurp><Cd>NULL</Cd></CtgyPurp></PmtTpInf><Amt><InstdAmt Ccy="EUR">10.00</InstdAmt></Amt><CdtrAgt><FinInstnId><BICFI>CLCTGB21XXX</BICFI><Nm>SwedbankAB</Nm><PstlAdr><AdrTp>ADDR</AdrTp><Ctry>GB</Ctry><AdrLine>Brunkerbergstorg 8</AdrLine><AdrLine>10534 Stockholm</AdrLine></PstlAdr></FinInstnId></CdtrAgt><Cdtr><Nm>Nerikes Telecom</Nm><PstlAdr><AdrTp>ADDR</AdrTp><PstCd>6781</PstCd><TwnNm>London</TwnNm><Ctry>DE</Ctry><AdrLine>Kamrerarvagen 18</AdrLine><AdrLine>12930 Hagersten</AdrLine></PstlAdr><CtryOfRes>NO</CtryOfRes></Cdtr><CdtrAcct><Id><IBAN>GB1111111111111111</IBAN></Id></CdtrAcct></CdtTrfTxInf></PmtInf></CstmrCdtTrfInitn></Document>]]]]>><![CDATA[</content></Wrapper>]]></con:value>
        </con:property>
        <con:property>
          <con:name>messagetoSend</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><Wrapper xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:pin.payment.edb.com:authpain001wrapper:v1_0" ><auth><![CDATA[<?xml version="1.0" encoding="UTF-8"?><AgreementAuthorizationRequest><authRequest><agreementData><agreementId>600685</agreementId><bankId>4201</bankId><userId>32334475149</userId><userFirstName>Ext.Telepay</userFirstName><userLastName>EvryFileArchive</userLastName><userIdType>EXTU</userIdType><productID>0</productID><organizationId>921095899</organizationId><preapproved>true</preapproved><rejectionLevel>TRANSACTION</rejectionLevel><origin>PAYMUL</origin></agreementData><agreementAccount><accountNumber>42010096504</accountNumber><swiftAdress>SPTRNO22XXX</swiftAdress><currencyCode>NOK</currencyCode><accountType>CoreAccount</accountType><access>CREDIT_AND_DEBIT</access><bookingLevel>D</bookingLevel><approvalLimit>10000000</approvalLimit><registerLimit>10000000</registerLimit><numberOfVerifiers>0</numberOfVerifiers><numberOfApprovers>0</numberOfApprovers></agreementAccount><metaInformation><receivedTimestamp>2020-09-15T00:05:37</receivedTimestamp></metaInformation></authRequest></AgreementAuthorizationRequest>]]]]>><![CDATA[</auth><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?><Document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.04"><CstmrCdtTrfInitn><GrpHdr><MsgId>pain002_15920075503</MsgId><CreDtTm>2020-09-15T00:06:27.355+02:00</CreDtTm><NbOfTxs>1</NbOfTxs><CtrlSum>10.00</CtrlSum><InitgPty><Nm>Vin fjerner co.</Nm><Id><OrgId><AnyBIC>SPTRNO22XXX</AnyBIC><Othr><Id>600685</Id><SchmeNm><Cd>BANK</Cd></SchmeNm></Othr></OrgId></Id></InitgPty></GrpHdr><PmtInf><PmtInfId>pain002_15920075503.P1</PmtInfId><PmtMtd>TRF</PmtMtd><NbOfTxs>1</NbOfTxs><CtrlSum>10.00</CtrlSum><PmtTpInf><InstrPrty>NORM</InstrPrty></PmtTpInf><ReqdExctnDt>2020-09-15</ReqdExctnDt><Dbtr><Id><OrgId><Othr><Id>921095899</Id></Othr></OrgId></Id></Dbtr><DbtrAcct><Id><Othr><Id>42010096504</Id><SchmeNm><Cd>BBAN</Cd></SchmeNm></Othr></Id></DbtrAcct><DbtrAgt><FinInstnId><BICFI>SPTRNO22XXX</BICFI></FinInstnId></DbtrAgt><ChrgBr>SHAR</ChrgBr><CdtTrfTxInf><PmtId><InstrId>pain002_15920075503.T4</InstrId><EndToEndId>pain002_15920075503.T4</EndToEndId></PmtId><PmtTpInf><InstrPrty>NORM</InstrPrty><CtgyPurp><Cd>NULL</Cd></CtgyPurp></PmtTpInf><Amt><InstdAmt Ccy="EUR">10.00</InstdAmt></Amt><CdtrAgt><FinInstnId><BICFI>CLCTGB21XXX</BICFI><Nm>SwedbankAB</Nm><PstlAdr><AdrTp>ADDR</AdrTp><Ctry>GB</Ctry><AdrLine>Brunkerbergstorg 8</AdrLine><AdrLine>10534 Stockholm</AdrLine></PstlAdr></FinInstnId></CdtrAgt><Cdtr><Nm>Nerikes Telecom</Nm><PstlAdr><AdrTp>ADDR</AdrTp><PstCd>6781</PstCd><TwnNm>London</TwnNm><Ctry>DE</Ctry><AdrLine>Kamrerarvagen 18</AdrLine><AdrLine>12930 Hagersten</AdrLine></PstlAdr><CtryOfRes>NO</CtryOfRes></Cdtr><CdtrAcct><Id><IBAN>GB1111111111111111</IBAN></Id></CdtrAcct></CdtTrfTxInf></PmtInf></CstmrCdtTrfInitn></Document>]]]]>><![CDATA[</content></Wrapper>]]></con:value>
        </con:property>
        <con:property>
          <con:name>PaymentChannel</con:name>
          <con:value>INT</con:value>
        </con:property>
        <con:property>
          <con:name>SourceApplication</con:name>
          <con:value>EVRYINT</con:value>
        </con:property>
        <con:property>
          <con:name>transactionsId</con:name>
          <con:value>186835</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="SetProperties" id="e71af173-36ba-414a-8bfb-9409d7f1948b">
    <con:settings/>
    <con:config>
      <script>import java.text.SimpleDateFormat

Date date = new Date();
SimpleDateFormat fn = new SimpleDateFormat("ddMyyhhmmss");
def datetime = fn.format(date)
log.info datetime

def EndtoEndID = "pain002_"+datetime;
log.info EndtoEndID
testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("msgID",EndtoEndID );</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchPain002Schema" id="0efb5e4f-a146-4165-93e3-3faa41df69e7">
    <con:settings/>
    <con:config>
      <script>//In case of camt54 xsd Filename is changed, property  camt54SchemaPath must be changed accordingly
def Pain002SchemaPath =testRunner.testCase.testSuite.getProject().getPath()   + File.separator +  "data" + File.separator + "pain.002.001.04.xsd"
log.info Pain002SchemaPath
Pain002SchemaPath = Pain002SchemaPath.replace("//","/")
testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("Pain002SchemaPath", Pain002SchemaPath)</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PreparePAIN001File" id="787bce87-b04e-4395-b0dc-110372d03b2b">
    <con:settings/>
    <con:config>
      <script>import com.eviware.soapui.support.GroovyUtils.*
import java.io.File 
import java.io.Reader

//MsgID
def MsgID = testRunner.testCase.getTestStepByName("PreCondition").getPropertyValue('msgID');
log.info MsgID;

//Initial Message to send
def messageToSend = context.expand( '${PreCondition#messageToSendGeneral}' )
log.info(messageToSend)

//Parmeters needed in message
def Account = context.expand( '${PreCondition#accountNumber}' )
def customerid = context.expand( '${PreCondition#customerID}' )
def dueDate = context.expand( '${PreCondition#dueDate}' )
def BANKID = context.expand( '${PreCondition#bankId}' )

//Replace parmaeters in message by respective values
messageToSend = messageToSend.replaceAll("TIMESTAMP",MsgID) ;
messageToSend = messageToSend.replaceAll("CUSTOMERID",customerid) ;
messageToSend = messageToSend.replaceAll("ACCOUNTID",Account) ;
messageToSend = messageToSend.replaceAll("DATE",dueDate) ;
messageToSend = messageToSend.replaceAll("BANKID",BANKID) ;

log.info messageToSend
//def transactionsIds = context.expand( '${PreCondition#transactionsIds#$[0]}' )

//Set 'messagetoSend_currentTC  property value with updated message
def update = testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("messagetoSend",messageToSend);</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PushAndReceiveFilePayment" id="4f99669c-3905-4d65-aeb6-6fae04bc5c41">
    <con:settings/>
    <con:config>
      <script>// File payment content property
import MQMessageUtils;

def filecontent = context.expand( '${PreCondition#messagetoSend#declare namespace ns1=\'urn:pin.payment.edb.com:authpain001wrapper:v1_0\'; //ns1:Wrapper[1]}' )
log.info(filecontent)

//def filecontent = context.expand( '${TestCase#messagetoSend}' )

// Set MQ properties
def mQHostName = context.expand( '${#Project#mqHostname}' )
def int mQPort = context.expand( '${#Project#mqPort}' ) as Integer
def mQQueuemanager = context.expand( '${#Project#mqManager}' )
def mQChannelAuth = context.expand( '${#Project#mqChannelAuth}' )
def mQMessageQueueSend = context.expand( '${#Project#sendQueue}' )
def mQMessageQueueRecieve = context.expand( '${#Project#receiveQueue}' )
def msgId = context.expand( '${Properties#msgId}' )


// Create utility class object, Create MQ connection
MQMessageUtils mqMessageUtils = new MQMessageUtils(mQQueuemanager,mQHostName,mQPort,mQChannelAuth,log);
// Send Message to MQ
log.info ("Message Sent :" + mqMessageUtils.sendMessage(mQMessageQueueSend,filecontent));</script>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay1" id="e26929ca-1b94-4c37-982e-2338a75c514a">
    <con:settings/>
    <con:config>
      <delay>10000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="TransactionsFromMQ" id="d0e901f7-8a6d-435a-b659-d0a1faf74cad">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PENDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>SELECT 
  T.TRANSACTIONSID ,
  M.MESSAGEID,
  P.PAYMENTINFOID,
  P.PMTINFOID,
  M.AGREEMENTID,
  T.ENDTOENDID ,
  T.INSTRUCTIONID,
  T.PAYMENTTYPE,
  T.PAYMENTSTATUS,
  T.ISPC ,
  T.FK_PROCESSINGLINEID,
  M.INITIATINGPARTYBICFI
FROM 
  TRANSACTIONS T,MESSAGE M, PAYMENTINFO P 
WHERE M.MESSAGEID = P.FK_MESSAGEID and
     P.PAYMENTINFOID = T.FK_PAYMENTINFOID and
  	M.MESSAGEIDENTIFICATION = '${PreCondition#msgID}'</con:query>
      <con:storedProcedure>false</con:storedProcedure>
      <con:assertion type="MessageContentAssertion" id="8e97c887-32b1-4c89-8f5a-4e8a7d8c4bc2" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTSTATUS[1]</con:xpath>
            <con:element>PAYMENTSTATUS</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>REJC</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <TRANSACTIONSID>186819</TRANSACTIONSID>
         <MESSAGEID>147094</MESSAGEID>
         <PAYMENTINFOID>162430</PAYMENTINFOID>
         <ENDTOENDID>fraud_06820064029.T4</ENDTOENDID>
         <PAYMENTTYPE>INPX</PAYMENTTYPE>
         <PAYMENTSTATUS>RFDD</PAYMENTSTATUS>
         <ISPC>PAYCTINTOUPNPWX</ISPC>
         <FK_PROCESSINGLINEID>8</FK_PROCESSINGLINEID>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="fetchPain002FromMqPayload" id="e365fc47-e708-4359-9c5b-6bbb9d557114">
    <con:settings/>
    <con:config>
      <script>import groovy.json.JsonSlurper

def strHost = context.expand( '${#Project#EBSHost}' )
def strUsername = context.expand( '${#Project#UserName}' )
def strPassword = context.expand( '${#Project#Password}' )
def  intPort = context.expand( '${#Project#Port}' )
def CPSLogStr
def env = testRunner.testCase.testSuite.project.getActiveEnvironmentName().toLowerCase()
env = env.substring(2)
def strFileDirectory = '/ebs/' +env+ '/pin/logs/piPaymentProcessor'
def msgID = context.expand( '${PreCondition#msgID}' )

if (!(ServerConnect.Connect(strHost ,strUsername, strPassword, Integer.parseInt(intPort)) == "PASS"))
               assert false," Failed to conenct to linux server!!"
else
log.info "Connected to the server successfully!!"

String command2="cd $strFileDirectory;sed -n '/body.*$msgID/,/Document>/p' 'mqpayload.log'"
log.info command2

def sedMqOutput = ServerConnect.execCommand(command2)
log.info "sedMqOutput:" + sedMqOutput
ServerConnect.closeConnection()

def pain002Response= sedMqOutput.split('body=')[2]
testRunner.testCase.getTestStepByName("PreCondition").setPropertyValue("Pain002_File", pain002Response.trim())
log.info "Pain002_File:" + pain002Response</script>
    </con:config>
  </con:testStep>
  <con:testStep type="transfer" name="dataTransfer" id="7f3d474d-e201-4f7b-be71-c8a53e3aebdf">
    <con:settings/>
    <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>transactionId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>TransactionsFromMQ</con:sourceStep>
        <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]</con:sourcePath>
        <con:targetType>TransactionID</con:targetType>
        <con:targetStep>PreCondition</con:targetStep>
        <con:targetPath/>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>paymentInfoId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>TransactionsFromMQ</con:sourceStep>
        <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTINFOID[1]</con:sourcePath>
        <con:targetType>paymentInfoId</con:targetType>
        <con:targetStep>PreCondition</con:targetStep>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>messageId</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>TransactionsFromMQ</con:sourceStep>
        <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]</con:sourcePath>
        <con:targetType>messageId</con:targetType>
        <con:targetStep>PreCondition</con:targetStep>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
      <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
        <con:name>agreementID</con:name>
        <con:sourceType>ResponseAsXml</con:sourceType>
        <con:sourceStep>TransactionsFromMQ</con:sourceStep>
        <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/AGREEMENTID[1]</con:sourcePath>
        <con:targetType>agreementID</con:targetType>
        <con:targetStep>PreCondition</con:targetStep>
        <con:upgraded>true</con:upgraded>
      </con:transfers>
    </con:config>
  </con:testStep>
  <con:testStep type="delay" name="Delay" id="83728a8b-57d7-434e-8842-d47c1e797277">
    <con:settings/>
    <con:config>
      <delay>4000</delay>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="fd6830b0-b67c-435f-940e-dda85c445544" name="PIN_HstRead">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentHistoricRead</con:operation>
      <con:request name="PIN_HstRead" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="107a076f-6bed-433f-b693-cd87cdf63eb3">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${#TestCase#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>${#TestCase#DestinationApplication}</wsc:DestinationApplication>
         <wsc:Function>paymentCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>E211732</wsc:userid>
            <wsc:credentials>${PreCondition#credentials}</wsc:credentials>
            <wsc:channel>${PreCondition#channel}</wsc:channel>
            <wsc:orgid>${PreCondition#orgid}</wsc:orgid>
            <wsc:customerid>${PreCondition#customerID}</wsc:customerid>
            <wsc:ip>${#TestCase#ip}</wsc:ip>
            <wsc:item key="Employee" value="E211732"/>
            <wsc:item key="SelfService" value="false"/>
            <wsc:item key="LogRef" value="a5c64f54-a6a9-4796-8a2c-35aeb2b3871c"/>
            <wsc:item key="PaymentChannel" value="ITR"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentHistoricReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${PreCondition#TransactionID}</urn:transactionId>
      </urn:PaymentHistoricReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Simple Contains" id="f6c2a9dd-bc06-408f-88f6-7053c15647c9" name="Contains">
          <con:configuration>
            <token>&lt;Message>OK&lt;/Message></token>
            <ignoreCase>false</ignoreCase>
            <useRegEx>false</useRegEx>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0/PINSPayment_V2_0PortType/PaymentHistoricReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="50463ace-515e-47d8-a5ec-c52a73e9374f">
            <con:authProfile>No Authorization</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="ADVICETRANSACTION" id="6e7fc386-0757-440a-8794-414daa18ec30">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PENDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
ADVICETRANSACTION 
WHERE 
FK_TRANSACTIONSID IN (${PreCondition#TransactionID})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="AGENT_PAYMENTINFO" id="40d250cc-61af-47b1-942e-510e95dbb977">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PENDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>SELECT * 
FROM 
AGENT_PAYMENTINFO 
WHERE 
FK_PAYMENTINFOID IN (${PreCondition#paymentInfoId})</con:query>
      <con:assertion type="Simple Contains" id="5dfb33ff-7131-4127-8458-0e5f0799a2d5" name="Contains">
        <con:configuration>
          <token>rowNumber="1"</token>
          <ignoreCase>false</ignoreCase>
          <useRegEx>false</useRegEx>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Schema Validation" id="b926ec12-1ab2-4e3f-accd-68a6809d3769">
    <con:settings/>
    <con:config>
      <script>import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory
// Specify an XSD Schema
def xsdFilePath = context.expand( '${PreCondition#Pain002SchemaPath}' )
log.info xsdFilePath;
// Get the response as XML
def XML_File = context.expand( '${PreCondition#Pain002_File}' )
// Create validation objects
def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
def schema = factory.newSchema(new StreamSource(xsdFilePath));
def validator = schema.newValidator();
// Validate the response against the schema
assert validator.validate(new StreamSource(new StringReader(XML_File))) == null;
log.info 'schema validation end'</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="PAIN002_Validation" id="6cf8a104-4832-4986-9962-be903e2d1069">
    <con:settings/>
    <con:config>
      <script>def Pain002_File = context.expand( '${PreCondition#Pain002_File}' )

log.info "Pain002_File :"+Pain002_File;
def XML = new XmlParser().parseText(Pain002_File)

//GrpHdr.MsgId
def MsgId_Actual = XML.CstmrPmtStsRpt.GrpHdr.MsgId.text();
def MessageID = context.expand( '${PreCondition#messageId}' )
def CustomerID = context.expand( '${PreCondition#agreementID}' )
def JobID = context.expand( '${ADVICETRANSACTION#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/FK_JOBID[1]}' )

def MessageID_Exp = CustomerID+'.'+JobID+'.'+MessageID;
assert MsgId_Actual==MessageID_Exp

//OrgId.BIC
def BIC_Actual = XML.CstmrPmtStsRpt.GrpHdr.InitgPty.Id.OrgId.AnyBIC.text();
def BIC_Exp = context.expand( '${TransactionsFromMQ#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INITIATINGPARTYBICFI[1]}' )

assert BIC_Exp==BIC_Actual;

//InitgPty.name
 def InitgPty_Actual = XML.CstmrPmtStsRpt.GrpHdr.InitgPty.Nm.text();

assert 'Vin fjerner co.'==InitgPty_Actual

//OrgnlMsgId
def OrgnlMsgId_Actual = XML.CstmrPmtStsRpt.OrgnlGrpInfAndSts.OrgnlMsgId.text();
def OrgnlMsgId_Exp = context.expand( '${PreCondition#msgID}' )

assert OrgnlMsgId_Exp==OrgnlMsgId_Actual;

//OrgnlMsgNmId
def OrgnlMsgNmId_Actual = XML.CstmrPmtStsRpt.OrgnlGrpInfAndSts.OrgnlMsgNmId.text();

assert 'pain.001.001.04'==OrgnlMsgNmId_Actual;

def pmtCount = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts.size();
log.info "Total records in file : "+pmtCount;

for (def i=0;i&lt;pmtCount;i++)
{
              def transID = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[0].text();
              log.info "Record "+i+" = "+transID

              if (transID==context.expand( '${PreCondition#TransactionID}' ))
                             {
                                           log.info "Identified matching record at array "+i;
                                           
                                           //OrgnlPmtInfId
                                           def OrgnlPmtInfId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].OrgnlPmtInfId.text();
								  def OrgnlPmtInfId_Exp = context.expand( '${TransactionsFromMQ#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/PMTINFOID[1]}' )
                                           
                                           
                                           assert OrgnlPmtInfId_Exp==OrgnlPmtInfId_Actual;
                                           
                                           //OrgnlInstrId
                                           def OrgnlInstrId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.OrgnlInstrId.text();
                                           def OrgnlInstrId_Exp = context.expand( '${TransactionsFromMQ#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/INSTRUCTIONID[1]}' )
                                           
                                           
                                           assert OrgnlInstrId_Exp==OrgnlInstrId_Actual;
                                           
                                           //OrgnlEndToEndId
                                           def OrgnlEndToEndId_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.OrgnlEndToEndId.text();
                                           def OrgnlEndToEndId_Exp = context.expand( '${TransactionsFromMQ#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/ENDTOENDID[1]}' )
                                           
                                           assert OrgnlEndToEndId_Exp==OrgnlEndToEndId_Actual;
                                           
                                           //TxSts
                                           def TxSts_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.TxSts.text();
                                           
                                           assert 'RJCT'==TxSts_Actual;
                                           
                                           //StsRsnInf
                                           def StsRsnInf_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.Rsn.Cd.text();
                                           def StsRsnInf_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:code[1]}' )
                                           
                                           assert StsRsnInf_Exp==StsRsnInf_Actual;
                                           
                                           //AddtlInf-1
                                           def AddtlInf1_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf.AddtlInf[0].text();
                                           def AddtlInf1_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:transactionId[1]}' )
                                           
                                           assert AddtlInf1_Exp==AddtlInf1_Actual;
                                           
                                           //AddtlInf-2
                                           def AddtlInf2_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:additionalInfo[1]}' )
                                           
                                           if(AddtlInf2_Exp!="")
                                           {
                                                          def AddtlInf2_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf[1].AddtlInf[0].text();
                                                          assert AddtlInf2_Exp==AddtlInf2_Actual;
                                                          log.info AddtlInf2_Actual;
                                                          
                                                          log.info "Verified Addtllnf2";
                                           }
                                           
                                           //AddtlInf-3
                                           def AddtlInf3_Exp = context.expand( '${PIN_HstRead#Response#declare namespace ns4=\'urn:pins.payment.evry.com:domain:paymentinitiation:v2_0\'; declare namespace ns5=\'urn:pins.payment.evry.com:domain:complex-types:v2_0\'; declare namespace ns2=\'urn:pins.payment.evry.com:ws:paymentinitiation:v2_0\'; //ns2:PaymentHistoricReadResponse[1]/ns2:paymentResult[1]/ns4:statusReason[1]/ns5:additionalInfo[2]}' )
                                           
                                           if(AddtlInf3_Exp!="")
                                           {
                                                          def AddtlInf3_Actual = XML.CstmrPmtStsRpt.OrgnlPmtInfAndSts[i].TxInfAndSts.StsRsnInf[1].AddtlInf[1].text();
                                                          assert AddtlInf3_Exp==AddtlInf3_Actual;
                                                          log.info AddtlInf3_Actual;
                                                          
                                                          log.info "Verified Addtllnf3";
                                           }
                                           break;
                             }
}</script>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>SourceApplication</con:name>
      <con:value>EVRYCPS</con:value>
    </con:property>
    <con:property>
      <con:name>DestinationApplication</con:name>
      <con:value>PINS</con:value>
    </con:property>
    <con:property>
      <con:name>ip</con:name>
      <con:value>10.235.84.79</con:value>
    </con:property>
    <con:property>
      <con:name>orgunit</con:name>
      <con:value>CORP</con:value>
    </con:property>
    <con:property>
      <con:name>requestedExecutionDate</con:name>
      <con:value>2020-05-11+05:00</con:value>
    </con:property>
    <con:property>
      <con:name>SessionID</con:name>
      <con:value>20200511694</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>e7d0cf6c-ff26-40de-9ae2-3a3fe5c69e36</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>88beb3b8-3a11-4c79-99a8-4d5d7182fc48</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>575c1fff-2018-4c87-bde6-12b95e3b1255</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>85f7636a-fd28-44aa-89c5-5ece3216290d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3fd09ccc-13ea-47c8-8b94-4cc80eb8a71c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f3f186ac-87e4-48ac-ac3c-2c478768a58e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d204c74c-1b29-4b35-b971-f64934034482</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>658df31d-91d4-4ce4-8ce9-29e33be94e01</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b1f36393-d563-4bb3-8830-82a44ca085ce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b2d34739-fb24-484b-b92c-1c3e5e4da21b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>5f931b50-81c4-4ab9-8e26-48e07b3a82e6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>44fcbede-ad8b-4bd0-bc14-99c9643e4a1e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>db2af29f-df1b-4c7a-a5a7-251d610f6149</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>854c2d27-58e2-4824-9cf5-16bb46f23b02</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>339dacfc-3228-4f07-b9a6-24b2cef746ff</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>16d840d3-6337-4a2e-9a0c-9bcc73384cc2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0f463d7b-b798-450d-a676-e58da604d84f</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d6be5254-9f6f-4564-808f-87add054f909</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>f85b35d5-2b09-4128-8a2c-90764f916d27</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>18416d01-2300-4554-9c31-81c7f9e486e3</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>26d75c96-59e7-4d7a-80c2-168d4a87141d</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d76347aa-2665-4e5b-a3d7-34922c769008</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>79d3bfd5-01ec-454d-ad2b-92eb4724ad7b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b923dc92-a7fc-46fc-b7f4-d60f6377c8ce</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0efb5e4f-a146-4165-93e3-3faa41df69e7</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>
