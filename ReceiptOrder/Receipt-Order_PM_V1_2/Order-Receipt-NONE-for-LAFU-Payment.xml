<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="7de43264-5385-4778-8826-d1b4c911a70f" discardOkResults="false" failOnError="false" failTestCaseOnErrors="true" keepSession="false" name="Order Receipt NONE for LAFU Payment" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" zephyrTestName="" zephyrTestId="" xmlns:con="http://eviware.com/soapui/config">
  <con:description>This testcase validates that PM user can order receipt(NONE) while creating a payment and can reorder when status is LAFU.
Verifies tag in DB tables and operational array in all the searches.</con:description>
  <con:settings>
    <con:setting id="7de43264-5385-4778-8826-d1b4c911a70ffileName">Order-Receipt-NONE-for-LAFU-Payment</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="properties" name="Properties" id="48737036-481f-4fd0-9aa9-b2c4f54f3ecf">
    <con:settings/>
    <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:properties>
        <con:property>
          <con:name>SourceApplication</con:name>
          <con:value>EVRYINT</con:value>
        </con:property>
        <con:property>
          <con:name>credentials</con:name>
          <con:value>03110012010400425kglPboRi3h1Z4YUjUpQ0UB65Ta2kPKj1KWwkWemtrL+SoWqMxx/KuqxUVbNyTu6DsSaabKNt2t+xJppso23a37EmmmyjbdrffJeRiGWfHDGwxCWOpDYc2jgSxAz1+8eEsSaabKNt2t/XzlyjxYnxhcG46wcbIKp/sSaabKNt2t9wBUG0SyIoqFfig80Gq4uXVBtimDzTiu2xJppso23a37Emmmyjbdrf8wP73CNrvpw=apG4tU0NraPbbqKUp39erKDFa7xy6z+r4VDMr/6qBlkFniGaNeDXv4cZcZZQQI6JtwB3JYQk6WqLA7oyp1FWRM6n46ehgNmHVNly8fTnQbIuGJSF2LUyGI7aE92/dgtp8jv9bsGpNe58K+xb4LeIHwjb2nVVvt4/2oLtDQ8IPJE=</con:value>
        </con:property>
        <con:property>
          <con:name>channel</con:name>
          <con:value>NBA</con:value>
        </con:property>
        <con:property>
          <con:name>orgid</con:name>
          <con:value>4201</con:value>
        </con:property>
        <con:property>
          <con:name>item1</con:name>
          <con:value>PaymentChannel</con:value>
        </con:property>
        <con:property>
          <con:name>value1</con:name>
          <con:value>INT</con:value>
        </con:property>
        <con:property>
          <con:name>item2</con:name>
          <con:value>LogRef</con:value>
        </con:property>
        <con:property>
          <con:name>value2</con:name>
          <con:value>${= java.time.LocalDateTime.now().plusDays(1).format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}-${=context.getCurrentStep().getTestCase().getLabel()}</con:value>
        </con:property>
        <con:property>
          <con:name>ReqExnDate</con:name>
          <con:value>${= java.time.LocalDateTime.now().plusDays(1).format(java.time.format.DateTimeFormatter.ofPattern('yyyy-MM-dd'))}</con:value>
        </con:property>
        <con:property>
          <con:name>ConnectionString</con:name>
          <con:value>jdbc:oracle:thin:forfall/forfall@//10.246.89.97:1530/rbst5_taf</con:value>
        </con:property>
        <con:property>
          <con:name>ReceiptOrder</con:name>
          <con:value>NONE</con:value>
        </con:property>
        <con:property>
          <con:name>PaymentStatus</con:name>
          <con:value>LAFU</con:value>
        </con:property>
        <con:property>
          <con:name>UserID</con:name>
          <con:value>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMERID[1]}</con:value>
        </con:property>
        <con:property>
          <con:name>customerid</con:name>
          <con:value>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMERID[1]}</con:value>
        </con:property>
        <con:property>
          <con:name>accountNumber</con:name>
          <con:value>${#TestSuite#accountNumber}</con:value>
        </con:property>
        <con:property>
          <con:name>currencyCode</con:name>
          <con:value>${#TestSuite#currencyCode}</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorAgent</con:name>
          <con:value>SPTRNO22XXX</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorCountry</con:name>
          <con:value>NO</con:value>
        </con:property>
        <con:property>
          <con:name>CreditorCurrency</con:name>
          <con:value>NOK</con:value>
        </con:property>
        <con:property>
          <con:name>CreditAccountNumber</con:name>
          <con:value>42021341821</con:value>
        </con:property>
        <con:property>
          <con:name>Amount</con:name>
          <con:value>20</con:value>
        </con:property>
        <con:property>
          <con:name>AgreementId</con:name>
          <con:value>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/CUSTOMERID[1]}</con:value>
        </con:property>
      </con:properties>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Fetch LAFU Data" id="181e9e68-aed0-4e05-aeab-6f04c1ccd907">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_s1_19c)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select C.TRANSACTIONSID,A.MESSAGEID,C.DEBETACCOUNTNO,A.CUSTOMERID,C.PAYMENTTYPE,C.PAYMENTSTATUS,C.RECEIPTORDER,A.MARKETTYPE,C.INITIATORBANKID
from MESSAGE A,PAYMENTINFO B, TRANSACTIONS C where A.MARKETTYPE = 'PM' and
 A.MESSAGEID = B.FK_MESSAGEID and B.PAYMENTINFOID = C.FK_PAYMENTINFOID and C.PAYMENTSTATUS = 'LAFU'
 and PAYMENTTYPE LIKE 'DOMM' 
 and C.INITIATORBANKID = '4201'  order by C.TRANSACTIONSID desc fetch first row only</con:query>
      <con:assertion type="MessageContentAssertion" id="68103f0c-135c-449d-8964-d5e2304e7268" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>1</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]</con:xpath>
            <con:element>TRANSACTIONSID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>12063</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]</con:xpath>
            <con:element>DEBETACCOUNTNO</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>42022512891</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTTYPE[1]</con:xpath>
            <con:element>PAYMENTTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>DOMM</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTSTATUS[1]</con:xpath>
            <con:element>PAYMENTSTATUS</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>LAFU</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/RECEIPTORDER[1]</con:xpath>
            <con:element>RECEIPTORDER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>NONE</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/MARKETTYPE[1]</con:xpath>
            <con:element>MARKETTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>PM</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/INITIATORBANKID[1]</con:xpath>
            <con:element>INITIATORBANKID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>4201</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <TRANSACTIONSID>12063</TRANSACTIONSID>
         <DEBETACCOUNTNO>42022512891</DEBETACCOUNTNO>
         <PAYMENTTYPE>DOMM</PAYMENTTYPE>
         <PAYMENTSTATUS>COMP</PAYMENTSTATUS>
         <RECEIPTORDER>NONE</RECEIPTORDER>
         <MARKETTYPE>PM</MARKETTYPE>
         <INITIATORBANKID>4201</INITIATORBANKID>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="goto" name="Conditional Goto" id="ed499375-5c45-4827-b40f-3b45f68e310c">
    <con:settings/>
    <con:config xsi:type="con:GotoStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:condition>
        <con:name>Condition 1</con:name>
        <con:type>XPATH</con:type>
        <con:expression>exists(//Results[1]/ResultSet[1]/Row[1]/@rowNumber)</con:expression>
        <con:targetStep>DeleteReceipt_DB</con:targetStep>
      </con:condition>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Payment Create" id="d5767518-15d4-4a0a-ba37-e0e28853c0cf">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentCreate</con:operation>
      <con:request name="Payment Create" id="7be4047e-98ff-4ef5-8185-a29cc342efea">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_7Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7" xmlns:urn1="urn:pins.payment.edb.com:domain:paymentinitiation:v1_7" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5" xmlns:urn3="urn:pays.payment.edb.com:domain:debtor:v1_5" xmlns:urn4="urn:pays.payment.edb.com:domain:creditor:v1_5">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${#TestSuite#customerid}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${#TestSuite#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentCreateRequest>
         <urn:paymentMessage>
            <urn1:paymentIdentification>
               <urn2:messageIdentification>${=Math.abs(new Random().nextInt() % 6000000) + 1}</urn2:messageIdentification>
               <!--Optional:-->
               <urn2:endToEndIdentification>${=Math.abs(new Random().nextInt() % 6000000) + 1}</urn2:endToEndIdentification>
            </urn1:paymentIdentification>
            <urn1:paymentInfo>
               <urn3:paymentMethod>TRF</urn3:paymentMethod>
               <!--Optional:-->
               <urn3:paymentTypeInformation>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:instructionPriority>NORM</urn3:instructionPriority>
               </urn3:paymentTypeInformation>
               <!--You have a CHOICE of the next 2 items at this level-->
               <urn3:requestedExecutionDate>${Properties#ReqExnDate}</urn3:requestedExecutionDate>
               <urn3:debtorAccount>
                  <urn2:identification>${#TestSuite#accountNumber}</urn2:identification>
                  <!--Optional:-->
                  <urn2:currency>${#TestSuite#currencyCode}</urn2:currency>
               </urn3:debtorAccount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:paymentInfo>
            <urn1:transaction>
               <urn4:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <urn2:instructedAmount currency="NOK">
                     <urn2:amount>${Properties#Amount}</urn2:amount>
                  </urn2:instructedAmount>
               </urn4:amount>
               <!--Optional:-->
               <!--Optional:-->
               <urn4:chargeBearer>SHAR</urn4:chargeBearer>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn4:creditorAgent>
                  <urn2:bic>${Properties#CreditorAgent}</urn2:bic>
                  <urn2:postalAddress>
                     <urn2:country>${Properties#CreditorCountry}</urn2:country>
                  </urn2:postalAddress>
               </urn4:creditorAgent>
               <urn4:creditor>
                  <!--Optional:-->
                  <urn2:name>Test Cred</urn2:name>
                  <!--Optional:-->
                  <urn2:postalAddress>
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <!--Optional:-->
                     <urn2:postCode>1597</urn2:postCode>
                     <urn2:townName>MOSS</urn2:townName>
                     <urn2:country>NO</urn2:country>
                     <urn2:addressLine>VLERVEIEN 75</urn2:addressLine>
                     <!--0 to 7 repetitions:-->
                  </urn2:postalAddress>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn4:creditor>
               <urn4:creditorAccount>
                  <urn2:identification>${Properties#CreditAccountNumber}</urn2:identification>
                  <urn2:currency>${Properties#CreditorCurrency}</urn2:currency>
               </urn4:creditorAccount>
               <urn4:confidential>false</urn4:confidential>
               <urn1:nationalSpecificPaymentRequestInformation xsi:type="ns851:NorwegianPaymentRequestInformation" xmlns:ns851="urn:pays.payment.edb.com:domain:nationalinformation-nor:v1_0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                  <!--Optional:-->
                  <!--Optional:-->
                  <ns851:receiptOrder>${Properties#ReceiptOrder}</ns851:receiptOrder>
                  <!--Optional:-->
                  
               </urn1:nationalSpecificPaymentRequestInformation>
               <!--Optional:-->
               <!--Optional:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--You have a CHOICE of the nxt 2 items at this level-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:transaction>
            <urn1:autoConfirm>true</urn1:autoConfirm>
            <urn1:retailPaymentApprovalNeeded>false</urn1:retailPaymentApprovalNeeded>
            <!--Optional:-->
            <!--Optional:-->
            <!--Optional:-->
         </urn:paymentMessage>
      </urn:PaymentCreateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="8679ce6d-5034-44cb-bde3-51473670a4e3"/>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="e1b7af21-c2c1-4377-a9b6-81244b8ffad3">
          <con:configuration>
            <scriptText>import com.eviware.soapui.support.XmlHolder
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

def path=context.expand( '${projectDir}')
String curStepName = (String)context.getCurrentStep().getLabel()

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
def response = groovyUtils.getXmlHolder(curStepName + "#Response")
def errorCode=response.getNodeValue("//*:ErrorCode");
def testCase = context.getCurrentStep().getTestCase().getLabel()
def endPoint = messageExchange.getEndpoint()

path=path+"\\results"
File dir = new File(path);
if (!dir.exists())
{
                log.info 'Creating Directory'
                dir.mkdir();
}

Date date = new Date();
SimpleDateFormat df = new SimpleDateFormat("dd-M-yyyy hh:mm:ss a zz");    
df.setTimeZone(TimeZone.getTimeZone("Europe/Oslo"));

def datetime = df.format(date)

SimpleDateFormat fn = new SimpleDateFormat("dd-M-yyyy hh_mm_ss a zz");    
def fileName = fn.format(date)

//log.info path 
def fout = new File(path+"\\"+testCase+" - "+curStepName+"_"+fileName+"_"+errorCode+".txt",)


fout.write("Time Submitted		:	"+datetime+"\r\n")
fout.append("End Point Used		:	"+endPoint+"\r\n")
fout.append("Time Taken		:	"+messageExchange.timeTaken+"ms\r\n")
fout.append("Executed in test set	:	"+testCase+" - "+curStepName+"_"+fileName)
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   REQUEST\r\n\r\n","UTF-8")
fout.append(messageExchange.getRequestHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getRequestContent() ).replace("\n","\r\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   RESPONSE\r\n\r\n","UTF-8")
fout.append(messageExchange.getResponseHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getResponseContent() ).replace("\n","\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="MessageContentAssertion" id="886556d9-3298-44ab-88c8-4d5fddc5961a" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:Severity[1]</con:xpath>
              <con:element>Severity</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:ComponentId[1]</con:xpath>
              <con:element>ComponentId</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>111</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:StrErrorCode[1]</con:xpath>
              <con:element>StrErrorCode</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:PaymentCreateResponse[1]/ns3:ResponseState[1]/ns2:StrErrorCode[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>OK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:NativeError[1]</con:xpath>
              <con:element>NativeError</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:PaymentCreateResponse[1]/ns3:ResponseState[1]/ns2:NativeError[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns2:ResponseState[1]/ns1:LogSequence[1]</con:xpath>
              <con:element>LogSequence</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
//ns4:PaymentCreateResponse[1]/ns3:ResponseState[1]/ns2:LogSequence[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:messageId[1]</con:xpath>
              <con:element>ns2:messageId</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>48502</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:paymentInfoId[1]</con:xpath>
              <con:element>ns2:paymentInfoId</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>57082</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:transactionId[1]</con:xpath>
              <con:element>ns2:transactionId</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>75215</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:initiatorIdentifier[1]</con:xpath>
              <con:element>ns2:initiatorIdentifier</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>01010002474</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:paymentReference[1]</con:xpath>
              <con:element>ns2:paymentReference</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>75215</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:releaseDate[1]</con:xpath>
              <con:element>ns2:releaseDate</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>2019-12-26+01:00</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:paymentType[1]</con:xpath>
              <con:element>ns2:paymentType</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>DOMESTIC_MESSAGE</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:paymentProduct[1]</con:xpath>
              <con:element>ns2:paymentProduct</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>PI Domestic</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:transactionFee[1]/@currency</con:xpath>
              <con:element>@currency</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NOK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:transactionFee[1]/ns1:amount[1]</con:xpath>
              <con:element>ns4:amount</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>25.00</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentIdentification[1]/ns1:messageIdentification[1]</con:xpath>
              <con:element>ns4:messageIdentification</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>574431</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentIdentification[1]/ns1:endToEndIdentification[1]</con:xpath>
              <con:element>ns4:endToEndIdentification</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>1242433</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:groupHeader[1]/ns1:creationDateTime[1]</con:xpath>
              <con:element>ns4:creationDateTime</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>2019-12-26T11:55:40+01:00</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentInfo[1]/ns1:paymentMethod[1]</con:xpath>
              <con:element>ns3:paymentMethod</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>TRF</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentInfo[1]/ns1:paymentTypeInformation[1]/ns1:instructionPriority[1]</con:xpath>
              <con:element>ns3:instructionPriority</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NORM</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentInfo[1]/ns1:requestedExecutionDate[1]</con:xpath>
              <con:element>ns3:requestedExecutionDate</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>2019-12-26+01:00</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtorAccount[1]/ns1:identification[1]</con:xpath>
              <con:element>ns4:identification</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>42123393613</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtorAccount[1]/ns1:currency[1]</con:xpath>
              <con:element>ns4:currency</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NOK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:paymentInfo[1]/ns1:debtorAgentBIC[1]</con:xpath>
              <con:element>ns3:debtorAgentBIC</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>SPTRNO22XXX</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtor[1]/ns1:name[1]</con:xpath>
              <con:element>ns4:name</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Mehmed Samantha Stornes</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtor[1]/ns1:postalAddress[1]/ns1:postCode[1]</con:xpath>
              <con:element>ns4:postCode</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>7603</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtor[1]/ns1:postalAddress[1]/ns1:townName[1]</con:xpath>
              <con:element>ns4:townName</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>LEVANGER</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtor[1]/ns1:postalAddress[1]/ns1:country[1]</con:xpath>
              <con:element>ns4:country</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NO</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pays.payment.edb.com:domain:debtor:v1_5';
declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:paymentInfo[1]/ns2:debtor[1]/ns1:postalAddress[1]/ns1:addressLine[1]</con:xpath>
              <con:element>ns4:addressLine</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>TORVIKVEGEN 52</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:amount[1]/ns1:instructedAmount[1]/@currency</con:xpath>
              <con:element>@currency</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NOK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:amount[1]/ns1:instructedAmount[1]/ns1:amount[1]</con:xpath>
              <con:element>ns4:amount</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>500.00</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:creditor:v1_5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:transaction[1]/ns1:chargeBearer[1]</con:xpath>
              <con:element>ns5:chargeBearer</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>SHAR</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditorAgent[1]/ns1:bic[1]</con:xpath>
              <con:element>ns4:bic</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>SPTRNO22XXX</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditorAgent[1]/ns1:nationalId[1]</con:xpath>
              <con:element>ns4:nationalId</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>4201</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditorAgent[1]/ns1:postalAddress[1]/ns1:country[1]</con:xpath>
              <con:element>ns4:country</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NO</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditor[1]/ns1:name[1]</con:xpath>
              <con:element>ns4:name</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Test Cred</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditor[1]/ns1:postalAddress[1]/ns1:postCode[1]</con:xpath>
              <con:element>ns4:postCode</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>1597</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditor[1]/ns1:postalAddress[1]/ns1:townName[1]</con:xpath>
              <con:element>ns4:townName</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>MOSS</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditor[1]/ns1:postalAddress[1]/ns1:country[1]</con:xpath>
              <con:element>ns4:country</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NO</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditor[1]/ns1:postalAddress[1]/ns1:addressLine[1]</con:xpath>
              <con:element>ns4:addressLine</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>VLERVEIEN 75</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditorAccount[1]/ns1:identification[1]</con:xpath>
              <con:element>ns4:identification</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>42021341821</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns4='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns3='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns2='urn:pays.payment.edb.com:domain:creditor:v1_5';
declare namespace ns1='urn:pays.payment.edb.com:domain:sepa-complex-types:v5';
//ns4:PaymentCreateResponse[1]/ns4:paymentResult[1]/ns3:transaction[1]/ns2:creditorAccount[1]/ns1:currency[1]</con:xpath>
              <con:element>ns4:currency</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>NOK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns3='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
declare namespace ns1='urn:pays.payment.edb.com:domain:creditor:v1_5';
//ns3:PaymentCreateResponse[1]/ns3:paymentResult[1]/ns2:transaction[1]/ns1:confidential[1]</con:xpath>
              <con:element>ns5:confidential</con:element>
              <con:type>XmlBoolean</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>false</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7';
declare namespace ns1='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7';
//ns2:PaymentCreateResponse[1]/ns2:paymentResult[1]/ns1:marketType[1]</con:xpath>
              <con:element>ns2:marketType</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>PM</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns6:PaymentCreateResponse xmlns:ns10="urn:srv.pays.payment.fs.evry.com:ws:agreementcapture:v1_0" xmlns:ns9="urn:srv.stord.fs.evry.com:domain:common:v1" xmlns:ns8="urn:pays.payment.edb.com:domain:edb-types:v1" xmlns:ns7="urn:pays.payment.edb.com:domain:nationalinformation-nor:v1_0" xmlns:ns6="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7" xmlns:ns5="urn:pays.payment.edb.com:domain:creditor:v1_5" xmlns:ns4="urn:pays.payment.edb.com:domain:sepa-complex-types:v5" xmlns:ns3="urn:pays.payment.edb.com:domain:debtor:v1_5" xmlns:ns2="urn:pins.payment.edb.com:domain:paymentinitiation:v1_7" xmlns="http://edb.com/ws/WSCommon_v21">
         <ns8:ResponseState>
            <ErrorCode>0</ErrorCode>
            <Severity>0</Severity>
            <ComponentId>111</ComponentId>
            <StrErrorCode xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <Message>OK</Message>
            <NativeError xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns8:ResponseState>
         <ns6:paymentResult>
            <ns2:messageId>48502</ns2:messageId>
            <ns2:paymentInfoId>57082</ns2:paymentInfoId>
            <ns2:transactionId>75215</ns2:transactionId>
            <ns2:initiatorIdentifier>01010002474</ns2:initiatorIdentifier>
            <ns2:paymentReference>75215</ns2:paymentReference>
            <ns2:releaseDate>2019-12-26+01:00</ns2:releaseDate>
            <ns2:paymentType>DOMESTIC_MESSAGE</ns2:paymentType>
            <ns2:paymentProduct>PI Domestic</ns2:paymentProduct>
            <ns2:transactionFee currency="NOK">
               <ns4:amount>25.00</ns4:amount>
            </ns2:transactionFee>
            <ns2:paymentIdentification>
               <ns4:messageIdentification>574431</ns4:messageIdentification>
               <ns4:endToEndIdentification>1242433</ns4:endToEndIdentification>
            </ns2:paymentIdentification>
            <ns2:groupHeader>
               <ns4:creationDateTime>2019-12-26T11:55:40+01:00</ns4:creationDateTime>
            </ns2:groupHeader>
            <ns2:paymentInfo>
               <ns3:paymentMethod>TRF</ns3:paymentMethod>
               <ns3:paymentTypeInformation>
                  <ns3:instructionPriority>NORM</ns3:instructionPriority>
               </ns3:paymentTypeInformation>
               <ns3:requestedExecutionDate>2019-12-26+01:00</ns3:requestedExecutionDate>
               <ns3:debtorAccount>
                  <ns4:identification>42123393613</ns4:identification>
                  <ns4:currency>NOK</ns4:currency>
               </ns3:debtorAccount>
               <ns3:debtorAgentBIC>SPTRNO22XXX</ns3:debtorAgentBIC>
               <ns3:debtor>
                  <ns4:name>Mehmed Samantha Stornes</ns4:name>
                  <ns4:postalAddress>
                     <ns4:postCode>7603</ns4:postCode>
                     <ns4:townName>LEVANGER</ns4:townName>
                     <ns4:country>NO</ns4:country>
                     <ns4:addressLine>TORVIKVEGEN 52</ns4:addressLine>
                  </ns4:postalAddress>
               </ns3:debtor>
            </ns2:paymentInfo>
            <ns2:transaction>
               <ns5:amount>
                  <ns4:instructedAmount currency="NOK">
                     <ns4:amount>500.00</ns4:amount>
                  </ns4:instructedAmount>
               </ns5:amount>
               <ns5:chargeBearer>SHAR</ns5:chargeBearer>
               <ns5:creditorAgent>
                  <ns4:bic>SPTRNO22XXX</ns4:bic>
                  <ns4:nationalId>4201</ns4:nationalId>
                  <ns4:postalAddress>
                     <ns4:country>NO</ns4:country>
                  </ns4:postalAddress>
               </ns5:creditorAgent>
               <ns5:creditor>
                  <ns4:name>Test Cred</ns4:name>
                  <ns4:postalAddress>
                     <ns4:postCode>1597</ns4:postCode>
                     <ns4:townName>MOSS</ns4:townName>
                     <ns4:country>NO</ns4:country>
                     <ns4:addressLine>VLERVEIEN 75</ns4:addressLine>
                  </ns4:postalAddress>
               </ns5:creditor>
               <ns5:creditorAccount>
                  <ns4:identification>42021341821</ns4:identification>
                  <ns4:currency>NOK</ns4:currency>
               </ns5:creditorAccount>
               <ns5:confidential>false</ns5:confidential>
            </ns2:transaction>
            <ns2:marketType>PM</ns2:marketType>
         </ns6:paymentResult>
      </ns6:PaymentCreateResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="UpdateTransactions" id="3d97f0ba-0543-41c0-ba74-ce324930262c">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>Database</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@//10.246.89.97:1530/pwh_g_st</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>Update TRANSACTIONS set PAYMENTSTATUS = 'LAFU' where PAYMENT_REF in (${Payment Create#Response#declare namespace ns6='urn:pins.payment.edb.com:ws:paymentinitiation:v1_7'; declare namespace ns2='urn:pins.payment.edb.com:domain:paymentinitiation:v1_7'; //ns6:PaymentCreateResponse[1]/ns6:paymentResult[1]/ns2:paymentReference[1]})</con:query>
      <con:storedProcedure>false</con:storedProcedure>
      <con:assertion type="JDBC Status" id="30b0ba63-c450-4b35-8142-f57f891a3c15" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="runFetchTransactionStep" id="18f64c3e-b805-4e3f-91b7-7e5b20b59b2a">
    <con:settings/>
    <con:config>
      <script>testRunner.runTestStepByName("Fetch LAFU Data")</script>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="DeleteReceipt_DB" id="9c560e65-b25d-4eb1-83b0-6f347f779bd0">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_s1_19c)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>update TRANSACTIONS set  RECEIPTORDER ='NONE' where TRANSACTIONSID = '${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}'</con:query>
      <con:assertion type="JDBC Status" id="5d3aa7dd-f3bf-40fc-a129-4c7c918396b8" name="JDBC Status"/>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="request" name="Receipt Order" id="fc0d8157-49ce-4027-89cb-936cd8510cbd">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentUtil_V1_2PortTypeSoap11</con:interface>
      <con:operation>ReceiptOrderUpdate</con:operation>
      <con:request name="Receipt Order" id="2be0cd79-5cf0-4518-aa92-8228becf8c77">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentUtil_V1_2Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentutil:v1_2" xmlns:urn1="urn:pins.payment.evry.com:domain:paymentutil:v1_2">
   <soapenv:Header>
      <wsc:AutHeader>
      <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
      <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
      <wsc:Function>paymentAuthorizationCreate</wsc:Function>
      <wsc:Version>1.0</wsc:Version>
      <wsc:ClientContext>
         <wsc:userid>${Properties#UserID}</wsc:userid>
         <wsc:credentials>${Properties#credentials}</wsc:credentials>
         <wsc:channel>${Properties#channel}</wsc:channel>
         <wsc:orgid>${Properties#orgid}</wsc:orgid>
         <wsc:customerid>${Properties#customerid}</wsc:customerid>
         <wsc:ip>1.1.1.1</wsc:ip>
         <wsc:item key="${Properties#item1}" value="${Properties#value1}"/> 
         <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
      </wsc:ClientContext>
   </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:ReceiptOrderUpdateRequest>
         <urn:receiptOrder>
            <urn1:debitAccount>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}</urn1:debitAccount>
            <!--You have a CHOICE of the next 2 items at this level-->
            
            <urn1:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn1:transactionId><urn1:receiptType>NONE</urn1:receiptType>
         </urn:receiptOrder>
      </urn:ReceiptOrderUpdateRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="SOAP Response" id="0022e314-ac22-4cdd-bc3e-6d2fefef1ad7"/>
        <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="81a4b559-0409-423e-8914-956e90d1faf2">
          <con:configuration>
            <scriptText>import com.eviware.soapui.support.XmlHolder
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

def path=context.expand( '${projectDir}')
String curStepName = (String)context.getCurrentStep().getLabel()

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
def response = groovyUtils.getXmlHolder(curStepName + "#Response")
def errorCode=response.getNodeValue("//*:ErrorCode");
def testCase = context.getCurrentStep().getTestCase().getLabel()
def endPoint = messageExchange.getEndpoint()

path=path+"\\results"
File dir = new File(path);
if (!dir.exists())
{
                log.info 'Creating Directory'
                dir.mkdir();
}

Date date = new Date();
SimpleDateFormat df = new SimpleDateFormat("dd-M-yyyy hh:mm:ss a zz");    
df.setTimeZone(TimeZone.getTimeZone("Europe/Oslo"));

def datetime = df.format(date)

SimpleDateFormat fn = new SimpleDateFormat("dd-M-yyyy hh_mm_ss a zz");    
def fileName = fn.format(date)

//log.info path 
def fout = new File(path+"\\"+testCase+" - "+curStepName+"_"+fileName+"_"+errorCode+".txt",)


fout.write("Time Submitted		:	"+datetime+"\r\n")
fout.append("End Point Used		:	"+endPoint+"\r\n")
fout.append("Time Taken		:	"+messageExchange.timeTaken+"ms\r\n")
fout.append("Executed in test set	:	"+testCase+" - "+curStepName+"_"+fileName)
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   REQUEST\r\n\r\n","UTF-8")
fout.append(messageExchange.getRequestHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getRequestContent() ).replace("\n","\r\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   RESPONSE\r\n\r\n","UTF-8")
fout.append(messageExchange.getResponseHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getResponseContent() ).replace("\n","\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="MessageContentAssertion" id="d8069718-4e54-49c5-b438-cb7b62b71607" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:Severity[1]</con:xpath>
              <con:element>Severity</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:ComponentId[1]</con:xpath>
              <con:element>ComponentId</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>111</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:StrErrorCode[1]</con:xpath>
              <con:element>StrErrorCode</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns4='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:StrErrorCode[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>OK</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:NativeError[1]</con:xpath>
              <con:element>NativeError</con:element>
              <con:type>XmlString</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns4='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:NativeError[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v21';
declare namespace ns2='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns3:ReceiptOrderUpdateResponse[1]/ns2:ResponseState[1]/ns1:LogSequence[1]</con:xpath>
              <con:element>LogSequence</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v21';
declare namespace ns3='urn:pays.payment.edb.com:domain:edb-types:v1';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns4='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns4:ReceiptOrderUpdateResponse[1]/ns3:ResponseState[1]/ns2:LogSequence[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pins.payment.evry.com:domain:paymentutil:v1_2';
declare namespace ns2='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:debitAccount[1]</con:xpath>
              <con:element>ns3:debitAccount</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/DEBETACCOUNTNO[1]}</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pins.payment.evry.com:domain:paymentutil:v1_2';
declare namespace ns2='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:transactionId[1]</con:xpath>
              <con:element>ns3:transactionId</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>68719</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='urn:pins.payment.evry.com:domain:paymentutil:v1_2';
declare namespace ns2='urn:pins.payment.evry.com:ws:paymentutil:v1_2';
//ns2:ReceiptOrderUpdateResponse[1]/ns2:receiptOrder[1]/ns1:receiptType[1]</con:xpath>
              <con:element>ns3:receiptType</con:element>
              <con:type xsi:nil="true"/>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>NONE</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns4:ReceiptOrderUpdateResponse xmlns:ns8="urn:pays.payment.edb.com:domain:nationalinformation-nor:v1_0" xmlns:ns7="urn:srv.pays.payment.fs.evry.com:ws:agreementcapture:v1_0" xmlns:ns6="urn:srv.stord.fs.evry.com:domain:common:v1" xmlns:ns5="urn:pays.payment.edb.com:domain:edb-types:v1" xmlns:ns4="urn:pins.payment.evry.com:ws:paymentutil:v1_2" xmlns:ns3="urn:pins.payment.evry.com:domain:paymentutil:v1_2" xmlns:ns2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5" xmlns="http://edb.com/ws/WSCommon_v21">
         <ns5:ResponseState>
            <ErrorCode>0</ErrorCode>
            <Severity>0</Severity>
            <ComponentId>111</ComponentId>
            <StrErrorCode xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <Message>OK</Message>
            <NativeError xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns5:ResponseState>
         <ns4:receiptOrder>
            <ns3:debitAccount>42023281230</ns3:debitAccount>
            <ns3:transactionId>68719</ns3:transactionId>
            <ns3:receiptType>STICKER</ns3:receiptType>
         </ns4:receiptOrder>
      </ns4:ReceiptOrderUpdateResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>Inherit From Parent</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="jdbc" name="Verify ReceiptOrder" id="e8a6eab4-eae5-4081-a1dd-06db45027fae">
    <con:settings>
      <con:setting id="prettyPrintResponse">true</con:setting>
    </con:settings>
    <con:config xsi:type="con:JdbcRequestTestStep" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:dbConnectionName>PWHDATA</con:dbConnectionName>
      <con:driver>oracle.jdbc.driver.OracleDriver</con:driver>
      <con:connectionString>jdbc:oracle:thin:PWHDATA/pwh@(DESCRIPTION=(ADDRESS_LIST=(LOAD_BALANCE=ON)(FAILOVER=ON)(ADDRESS=(PROTOCOL=TCP)(HOST=dlt-exa853-scan.unix.cosng.net)(PORT=1530)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=pwh_g_s1_19c)))</con:connectionString>
      <con:password/>
      <con:connectionProperties/>
      <con:query>select TRANSACTIONSID,PAYMENTTYPE,PAYMENTSTATUS,RECEIPTORDER from TRANSACTIONS where TRANSACTIONSID = '${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}'</con:query>
      <con:assertion type="MessageContentAssertion" id="8da21536-2427-4cde-a860-6d509bf6b1f1" name="Message Content Assertion">
        <con:configuration xsi:type="con:MessageContentAssertion">
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/@fetchSize</con:xpath>
            <con:element>@fetchSize</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>10</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</con:xpath>
            <con:element>@rowNumber</con:element>
            <con:type/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>1</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]</con:xpath>
            <con:element>TRANSACTIONSID</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>68719</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTTYPE[1]</con:xpath>
            <con:element>PAYMENTTYPE</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>false</con:enabled>
            <con:expectedValue>DOKI</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/PAYMENTSTATUS[1]</con:xpath>
            <con:element>PAYMENTSTATUS</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>LAFU</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:elements>
            <con:xpath>//Results[1]/ResultSet[1]/Row[1]/RECEIPTORDER[1]</con:xpath>
            <con:element>RECEIPTORDER</con:element>
            <con:type xsi:nil="true"/>
            <con:operator>=</con:operator>
            <con:enabled>true</con:enabled>
            <con:expectedValue>NONE</con:expectedValue>
            <con:hasValue>false</con:hasValue>
            <con:numberType>false</con:numberType>
          </con:elements>
          <con:originalMessage><![CDATA[<Results>
   <ResultSet fetchSize="10">
      <Row rowNumber="1">
         <TRANSACTIONSID>68719</TRANSACTIONSID>
         <PAYMENTTYPE>DOKI</PAYMENTTYPE>
         <PAYMENTSTATUS>COMP</PAYMENTSTATUS>
         <RECEIPTORDER>STICKER</RECEIPTORDER>
      </Row>
   </ResultSet>
</Results>]]></con:originalMessage>
        </con:configuration>
      </con:assertion>
      <con:properties/>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="50b9c14e-6bee-4d71-9e2c-973cc2059339" name="PaymentRead_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V2_0" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="530d89d5-87c1-419e-a07a-7e0c3748e3f5">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:22561/pin/services/PINSPayment_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         
      <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId></urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="18615d4b-a0fa-47c9-bc10-3df73274eb26" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="36f6d1ca-ab63-4f6c-aff0-d48e8e46a248" name="Not SOAP Fault"/>
        <con:assertion type="XPath Match" id="7352cacc-34d8-41e6-bcdc-9b37cffc6980" name="XPath Match_RECEIPT_ORDER_PRINT">
          <con:configuration>
            <path>declare namespace ns4='urn:pins.payment.evry.com:domain:paymentinitiation:v2_0';
declare namespace ns2='urn:pins.payment.evry.com:ws:paymentinitiation:v2_0';
//ns2:PaymentReadResponse[1]/ns2:paymentResult[1]/ns4:operationsArray</path>
            <content>*RECEIPT_ORDER_PRINT*</content>
            <allowWildcards>true</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="2bbca57a-c505-49c9-a08c-6c20cfe46241" name="XPath Match">
          <con:configuration>
            <path>declare namespace ns4='urn:pins.payment.evry.com:domain:paymentinitiation:v2_0';
declare namespace ns8='urn:pins.payment.evry.com:domain:nationalinformation-nor:v2_0';
declare namespace ns2='urn:pins.payment.evry.com:ws:paymentinitiation:v2_0';
//ns2:PaymentReadResponse[1]/ns2:paymentResult[1]/ns4:result[1]/ns4:transaction[1]/ns4:nationalSpecificPaymentInformation[1]/ns8:receiptOrder[1]</path>
            <content>${Properties#ReceiptOrder}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="78ec1398-a6fe-4e8a-8abd-45b6a6f10d8f" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
		
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	 slurperResponse = new XmlSlurper().parseText(xmlHold)
	 receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	log.info "receiptOrderRes--" + receiptOrderRes

      receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )

assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]
//log.info slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
//log.info slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.size()

def x = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList


def tempList = [ ]
switch (paymentStatus){

	case 'COMP':
		if (receiptOrder == 'NONE' )  {
			tempList.add ('RECEIPT_ORDER_STICKER')
		}
		else if ( receiptOrder == 'STICKER'){
			tempList.add ('RECEIPT_ORDER_STICKER')					
		}		
		break
	case [ 'RFDD', 'LAFU','STOP']:
		if (receiptOrder == 'NONE' )  {
			tempList.add ('RECEIPT_ORDER_STICKER')
			tempList.add ('RECEIPT_ORDER_PRINT')
		}
		else if ( receiptOrder == 'STICKER'){
			tempList.add ('RECEIPT_ORDER_PRINT')		
			tempList.add ('RECEIPT_ORDER_REMOVE')						
		}		
		else if ( receiptOrder == 'PRINT'){
			tempList.add ('RECEIPT_ORDER_STICKER')		
			tempList.add ('RECEIPT_ORDER_REMOVE')			
		}
		break
	default:
	assert false,'No case found'
		log.info "No case found"	
}

assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v2_0/PINSPayment_V2_0PortType/PaymentReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="0e28a30e-bf14-421e-b8cf-6cc933841e5a" name="PaymentRead_V1_10">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_10PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V1_10" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4de0c497-ecb2-43ae-aeeb-7d62016cdeff">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_10</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_10">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         
         
      <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId></urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="aaf9935f-2460-46be-a311-a413b0276b6f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="8d177336-c2cd-4698-b169-b7c50d63370c" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="b0bb07f3-b734-4f93-b7c2-6214cc15b74e" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="94c6be2a-0eca-4e19-8ff6-f0f81c5b454d" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_10/PINSPayment_V1_10PortType/PaymentReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="bb406aa6-75db-4bd6-a5e0-b3b5ca670134" name="PaymentRead_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4c8ca1ec-e536-4652-9d40-a3f2852b6e90">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_9">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="GroovyScriptAssertion" id="bf010744-199f-4422-bd04-02b418565dee" name="Script Assertion">
          <con:configuration>
            <scriptText>import com.eviware.soapui.support.XmlHolder
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

def path=context.expand( '${projectDir}')
String curStepName = (String)context.getCurrentStep().getLabel()

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
def response = groovyUtils.getXmlHolder(curStepName + "#Response")
def errorCode=response.getNodeValue("//*:ErrorCode");
def testCase = context.getCurrentStep().getTestCase().getLabel()
def endPoint = messageExchange.getEndpoint()

path=path+"\\results"
File dir = new File(path);
if (!dir.exists())
{
                log.info 'Creating Directory'
                dir.mkdir();
}

Date date = new Date();
SimpleDateFormat df = new SimpleDateFormat("dd-M-yyyy hh:mm:ss a zz");    
df.setTimeZone(TimeZone.getTimeZone("Europe/Oslo"));

def datetime = df.format(date)

SimpleDateFormat fn = new SimpleDateFormat("dd_M_yyyy_hh_mm_ss_a_zz");    
def fileName = fn.format(date)

//log.info path 
def fout = new File(path+"\\"+testCase+" - "+curStepName+"_"+fileName+"_"+errorCode+".txt",)


fout.write("Time Submitted		:	"+datetime+"\r\n")
fout.append("End Point Used		:	"+endPoint+"\r\n")
fout.append("Time Taken		:	"+messageExchange.timeTaken+"ms\r\n")
fout.append("Executed in test set	:	"+testCase+" - "+curStepName+"_"+fileName)
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   REQUEST\r\n\r\n","UTF-8")
fout.append(messageExchange.getRequestHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getRequestContent() ).replace("\n","\r\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   RESPONSE\r\n\r\n","UTF-8")
fout.append(messageExchange.getResponseHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getResponseContent() ).replace("\n","\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="ba484c66-2574-4a19-8683-e1cbc577df24" name="Script Assertion 2">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			assert receiptOrder.toString().toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_9/PINSPayment_V1_9PortType/PaymentReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="2d6b8a89-0503-4fa6-9a6d-3821cc19d4ae" name="PaymentRead_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V1_8" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b9ed9184-dbef-466c-a187-0f524d041acc">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPayment_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentinitiation:v1_8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
        
      </urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="3bfec32a-b18d-462d-a202-366fba81279c" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="3aa3d478-c928-4b6c-a92a-b81ccb15ee3d" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="1f68f272-bc1a-427c-83cb-74ed6eb43cee" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="d34fe74e-e94d-457e-9a1a-44d82ef01aa9" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentinitiation:v1_8/PINSPayment_V1_8PortType/PaymentReadRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="2e128768-3c2e-47f1-8816-1aeb3c5cb402" name="PaymentRead_V1_6" disabled="true">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V1_6" id="f6739e3b-4d5e-4a96-9f5c-1c831c0c3aee">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPayment_V1_6</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentinitiation:v1_6">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="608b0f3d-5a38-4bac-97d7-0fcb0fdb57c1" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="72d06540-5e4e-43b8-b5cb-92fa2714d343" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="70cc0595-27d9-4c3e-8b05-514e14533d32" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="44b3b502-8e61-49af-af07-19b6f1e74d6f" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentinitiation:v1_6/PINSPayment_V1_6PortType/PaymentReadRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="2bc15a40-494d-4a73-85b2-eaf2242aa58e" name="PaymentRead_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPayment_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentRead</con:operation>
      <con:request name="PaymentRead_V1_7" id="1e269f04-fc3d-4c74-91fb-2ee229452ce1">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPayment_V1_7Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentReadRequest>
         <!--You have a CHOICE of the next 2 items at this level-->
         <urn:transactionId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/TRANSACTIONSID[1]}</urn:transactionId>
      </urn:PaymentReadRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="GroovyScriptAssertion" id="7ec1382a-d645-43b0-85b4-afde901c373a" name="Script Assertion">
          <con:configuration>
            <scriptText>import com.eviware.soapui.support.XmlHolder
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

def path=context.expand( '${projectDir}')
String curStepName = (String)context.getCurrentStep().getLabel()

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context ) 
def response = groovyUtils.getXmlHolder(curStepName + "#Response")
def errorCode=response.getNodeValue("//*:ErrorCode");
def testCase = context.getCurrentStep().getTestCase().getLabel()
def endPoint = messageExchange.getEndpoint()

path=path+"\\results"
File dir = new File(path);
if (!dir.exists())
{
                log.info 'Creating Directory'
                dir.mkdir();
}

Date date = new Date();
SimpleDateFormat df = new SimpleDateFormat("dd-M-yyyy hh:mm:ss a zz");    
df.setTimeZone(TimeZone.getTimeZone("Europe/Oslo"));

def datetime = df.format(date)

SimpleDateFormat fn = new SimpleDateFormat("dd_M_yyyy_hh_mm_ss_a_zz");    
def fileName = fn.format(date)

//log.info path 
def fout = new File(path+"\\"+testCase+" - "+curStepName+"_"+fileName+"_"+errorCode+".txt",)


fout.write("Time Submitted		:	"+datetime+"\r\n")
fout.append("End Point Used		:	"+endPoint+"\r\n")
fout.append("Time Taken		:	"+messageExchange.timeTaken+"ms\r\n")
fout.append("Executed in test set	:	"+testCase+" - "+curStepName+"_"+fileName)
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   REQUEST\r\n\r\n","UTF-8")
fout.append(messageExchange.getRequestHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getRequestContent() ).replace("\n","\r\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")
fout.append("                                                                                                   RESPONSE\r\n\r\n","UTF-8")
fout.append(messageExchange.getResponseHeaders())
fout.append("\n\n")
fout.append(new String( messageExchange.getResponseContent() ).replace("\n","\n"),"UTF-8")
fout.append("\r\n\r\n","UTF-8")
fout.append("=========================================================================================================================\r\n","UTF-8")</scriptText>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="005dc888-1020-4d47-8b3d-0051a0a480a2" name="ValidateOperationalArray">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			assert receiptOrder.toString().toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentinitiation:v1_7/PINSPayment_V1_7PortType/PaymentReadRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="9d701c3d-b5f4-4220-a309-74cbf4f68e8a" name="PaymentAccountSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentAccountSearch</con:operation>
      <con:request name="PaymentAccountSearch_V2_0" id="3f6dd37a-ca41-4453-9619-abd44cd38ea8">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app02.man.cosng.net:22411/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentAccountSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:accountCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:accountCriteria>
         </urn:searchCriteria>
      </urn:PaymentAccountSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="01d80cb6-fc27-4c6d-8480-de8ce85a6460" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="e53a59ca-2ed7-444d-95dd-f65fa703b34e" name="Not SOAP Fault"/>
        <con:assertion type="MessageContentAssertion" id="f64eb074-4789-4ffb-a392-21faff04cf1a" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentAccountSearchResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentAccountSearchResponse[1]/ns2:ResponseState[1]/ns1:Severity[1]</con:xpath>
              <con:element>Severity</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentAccountSearchResponse[1]/ns2:ResponseState[1]/ns1:ComponentId[1]</con:xpath>
              <con:element>ComponentId</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>111</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentAccountSearchResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Not authorized for accounts</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentAccountSearchResponse[1]/ns2:ResponseState[1]/ns1:LogSequence[1]</con:xpath>
              <con:element>LogSequence</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v22';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns3='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns4='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns4:PaymentAccountSearchResponse[1]/ns3:ResponseState[1]/ns2:LogSequence[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns5:PaymentAccountSearchResponse xmlns:ns8="urn:pins.payment.evry.com:ws:paymentutil:v2_0" xmlns:ns7="urn:pins.payment.evry.com:domain:paymentutil:v2_0" xmlns:ns6="urn:pins.payment.evry.com:domain:nationalinformation-nor:v2_0" xmlns:ns5="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:ns4="urn:pins.payment.evry.com:domain:complex-types:v2_0" xmlns:ns3="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:ns2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns="http://edb.com/ws/WSCommon_v22">
         <ns2:ResponseState>
            <ErrorCode>6485</ErrorCode>
            <Severity>2</Severity>
            <ComponentId>111</ComponentId>
            <Message>Not authorized for accounts</Message>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns2:ResponseState>
      </ns5:PaymentAccountSearchResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="9b915bd9-3445-493f-b7c0-6c782903fb90" name="XPath Match_RECEIPT_ORDER_PRINT">
          <con:configuration>
            <path>declare namespace ns5='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:domain:search:v2_0';
//ns5:PaymentAccountSearchResponse[1]/ns5:result[1]/ns3:result[1]/ns3:operationsArray</path>
            <content>*RECEIPT_ORDER_PRINT*</content>
            <allowWildcards>true</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="4172656e-5f94-4a1f-a7ba-b76d9a8bb485" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentAccountSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="ef94bfc1-2f6e-4253-b67e-c25f4520b9fa" name="PaymentAccountSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentAccountSearch</con:operation>
      <con:request name="PaymentAccountSearch_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="69dde6bb-59cd-402c-bb5f-42399e8f9c37">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:22561/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentAccountSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:accountCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:accountCriteria>
         </urn:searchCriteria>
      </urn:PaymentAccountSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="93b4b2f8-7269-414a-a736-f2fa9a804177" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="21dfaa1c-dcfb-4564-a5b6-cfd88dccb843" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="499e7d44-a396-41d1-807e-600c3f88f288" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="c075d8d2-7388-4174-a850-0398d39cdc0d" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentAccountSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="9bb7a1d6-0282-46ff-a4f9-e034f0d73c34" name="PaymentAccountSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentAccountSearch</con:operation>
      <con:request name="PaymentAccountSearch_V1_8" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="60ca6026-7e07-451a-8fe8-b75bf75d5f9f">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentAccountSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:accountCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
            </urn1:accountCriteria>
         </urn:searchCriteria>
      </urn:PaymentAccountSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="05721439-c93d-4874-a574-d4fb44b89060" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="645c8744-7197-4f7d-9eca-b72dbb670f61" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="5f601e1d-ae48-4ee8-815c-1670c695d502" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="e5d6f2dd-8635-4aa8-b884-862b58fc22b8" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentAccountSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="8a03e959-63c2-46ca-a9a6-d1f61fc6d6e0" name="PaymentAccountSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentAccountSearch</con:operation>
      <con:request name="PaymentAccountSearch_V1_7" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3a6c6549-e34f-4bd0-9e13-fd67bbb095b6">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_7</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentAccountSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:accountCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:accountCriteria>
         </urn:searchCriteria>
      </urn:PaymentAccountSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="25934a46-3bcb-42fc-b1c0-8102a96ae54e" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="4bc2d7b0-eb5b-4bd2-93b0-8a915a995854" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="6a703567-20d3-4f98-a5ee-36bca3678b49" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="6b505e92-47da-4493-ae48-87c706229af6" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentAccountSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="b12b11fd-bab0-4649-b132-093ad96083ec" name="PaymentAccountSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentAccountSearch</con:operation>
      <con:request name="PaymentAccountSearch_V1_6" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="5429f611-c00c-47d5-88d4-bc9d53503ce6">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_6</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentAccountSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:accountCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:dateFromTo>
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
            </urn1:accountCriteria>
         </urn:searchCriteria>
      </urn:PaymentAccountSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="5129309d-c244-4926-9745-aa6ae3f9a729" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="8ffb7db6-bc49-4157-8273-94841aefeb8d" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="ca78a68d-63f3-420b-9bc9-21345996fe69" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="ceaa1c00-f903-4c6e-a4b4-0e60aa729e96" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:jmsPropertyConfig/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentAccountSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="7cd3f571-86d3-4968-bf46-c01867fb93b3" name="PaymentMessageSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentMessageSearch</con:operation>
      <con:request name="PaymentMessageSearch_V2_0" id="f4e5576a-b326-4343-bc99-8e8cd737f084">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app02.man.cosng.net:22411/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentMessageSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:messageCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:requestedExecutionDate><urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:messageCriteria>
         </urn:searchCriteria>
      </urn:PaymentMessageSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="6c7e88f2-bcb8-47f9-a9b8-a86748843bbb" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="81e4cc61-889d-4150-8906-a1fd93df0414" name="Not SOAP Fault"/>
        <con:assertion type="MessageContentAssertion" id="3f2d1ab4-5e82-4090-8ed8-ef6d27f673fa" name="Message Content Assertion">
          <con:configuration xsi:type="con:MessageContentAssertion">
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentMessageSearchResponse[1]/ns2:ResponseState[1]/ns1:ErrorCode[1]</con:xpath>
              <con:element>ErrorCode</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentMessageSearchResponse[1]/ns2:ResponseState[1]/ns1:Severity[1]</con:xpath>
              <con:element>Severity</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>true</con:enabled>
              <con:expectedValue>0</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentMessageSearchResponse[1]/ns2:ResponseState[1]/ns1:ComponentId[1]</con:xpath>
              <con:element>ComponentId</con:element>
              <con:type>XmlInt</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>111</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentMessageSearchResponse[1]/ns2:ResponseState[1]/ns1:Message[1]</con:xpath>
              <con:element>Message</con:element>
              <con:type>XmlString</con:type>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>Not authorized for accounts</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns1='http://edb.com/ws/WSCommon_v22';
declare namespace ns2='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns3:PaymentMessageSearchResponse[1]/ns2:ResponseState[1]/ns1:LogSequence[1]</con:xpath>
              <con:element>LogSequence</con:element>
              <con:type>XmlLong</con:type>
              <con:operator>exists</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue xsi:nil="true"/>
              <con:hasValue>false</con:hasValue>
              <con:numberType>true</con:numberType>
            </con:elements>
            <con:elements>
              <con:xpath>declare namespace ns2='http://edb.com/ws/WSCommon_v22';
declare namespace ns1='http://www.w3.org/2001/XMLSchema-instance';
declare namespace ns3='urn:pins.payment.evry.com:domain:common:v2_0';
declare namespace ns4='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
//ns4:PaymentMessageSearchResponse[1]/ns3:ResponseState[1]/ns2:LogSequence[1]/@ns1:nil</con:xpath>
              <con:element>@xsi:nil</con:element>
              <con:type/>
              <con:operator>=</con:operator>
              <con:enabled>false</con:enabled>
              <con:expectedValue>true</con:expectedValue>
              <con:hasValue>false</con:hasValue>
              <con:numberType>false</con:numberType>
            </con:elements>
            <con:originalMessage><![CDATA[<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
      <ns5:PaymentMessageSearchResponse xmlns:ns8="urn:pins.payment.evry.com:ws:paymentutil:v2_0" xmlns:ns7="urn:pins.payment.evry.com:domain:paymentutil:v2_0" xmlns:ns6="urn:pins.payment.evry.com:domain:nationalinformation-nor:v2_0" xmlns:ns5="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:ns4="urn:pins.payment.evry.com:domain:complex-types:v2_0" xmlns:ns3="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:ns2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns="http://edb.com/ws/WSCommon_v22">
         <ns2:ResponseState>
            <ErrorCode>6485</ErrorCode>
            <Severity>2</Severity>
            <ComponentId>111</ComponentId>
            <Message>Not authorized for accounts</Message>
            <LogSequence xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
         </ns2:ResponseState>
      </ns5:PaymentMessageSearchResponse>
   </soap:Body>
</soap:Envelope>]]></con:originalMessage>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="91bce7ac-e396-4365-951e-c62be1526d03" name="XPath Match_RECEIPT_ORDER_PRINT">
          <con:configuration>
            <path>declare namespace ns5='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:domain:search:v2_0';
//ns5:PaymentMessageSearchResponse[1]/ns5:result[1]/ns3:transactionResult[1]/ns3:operationsArray</path>
            <content>*RECEIPT_ORDER_PRINT*</content>
            <allowWildcards>true</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="XPath Match" id="1435eafb-92d5-4d66-8c37-b8ce01e47ca7" name="XPath Match_STICCKER_TAG">
          <con:configuration>
            <path>declare namespace ns6='urn:pins.payment.evry.com:domain:nationalinformation-nor:v2_0';
declare namespace ns5='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:domain:search:v2_0';
//ns5:PaymentMessageSearchResponse[1]/ns5:result[1]/ns3:transactionResult[1]/ns3:nationalSpecificPaymentInformation[1]/ns6:receiptOrder[1]</path>
            <content>${Properties#ReceiptOrder}</content>
            <allowWildcards>false</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="36d22ed6-f51c-4211-b83c-eacb3bd2736b" name="Validate_OperationalArray">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentMessageSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="91b8c99d-1504-41c0-bbe4-f2c2c7bff7b4" name="PaymentMessageSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentMessageSearch</con:operation>
      <con:request name="PaymentMessageSearch_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3bd21bbd-8c2c-41c5-ae84-146be97a9233">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
       <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentMessageSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:messageCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:messageCriteria>
         </urn:searchCriteria>
      </urn:PaymentMessageSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="5e4bc391-d871-49b4-a0c3-510045d6e1d8" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="0d42f4d7-79a3-436f-b7df-92527290567c" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="a93ea9d5-701b-4602-9ed2-be75a8869a97" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="3abd549b-f4ca-42f9-b65e-a7d937963719" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentMessageSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="b28ea644-c6d3-4052-963a-5492c94f9a61" name="PaymentMessageSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentMessageSearch</con:operation>
      <con:request name="PaymentMessageSearch_V1_8" id="b443632c-9eb0-48db-80df-cad702689568">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentMessageSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:messageCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
            </urn1:messageCriteria>
         </urn:searchCriteria>
      </urn:PaymentMessageSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="428d3e84-2ca7-4a53-86c2-afc6127d8ca5" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="4295ba43-0217-4d91-ada8-211b0afefc46" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="cb6a3c45-65b9-461a-8ecc-4726edda3fe9" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="cef8e810-4c0e-482a-9e95-129146905016" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentMessageSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="00404bb9-2a36-4893-b9bd-ed3a2cc853e5" name="PaymentMessageSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentMessageSearch</con:operation>
      <con:request name="PaymentMessageSearch_V1_7" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="81fd6c56-4c41-4906-a7ba-0013359446f0">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_7</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
       <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentMessageSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:messageCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:messageCriteria>
         </urn:searchCriteria>
      </urn:PaymentMessageSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="1621a2ba-ccb1-475a-813a-e34bf370993f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="cab7c96b-1b35-4bb9-97cd-36497b34e201" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="e40fb0c9-fefd-498b-bf21-9eb531949a85" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="c243e9a9-17bd-4ba5-9d8b-2f9fc2e17043" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentMessageSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="b294ec03-b773-4346-92b5-48ce5def2629" name="PaymentMessageSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentMessageSearch</con:operation>
      <con:request name="PaymentMessageSearch_V1_6" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="bb3e7f90-5252-43a3-bf67-5a4bfbb923ec">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_6</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentMessageSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:messageCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:dateFromTo>
               </urn1:requestedExecutionDate>
               <!--Optional:-->
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
            </urn1:messageCriteria>
         </urn:searchCriteria>
      </urn:PaymentMessageSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="91cffcb9-fc11-494e-a0b0-8ff50e74f71f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="cccb803d-4ba7-4b49-91e7-df8f35372f71" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="c0875e61-4c3b-449b-946a-db6f83820416" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="54d1128a-e10d-4db9-98be-254d184d1401" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentMessageSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="4eb3d54a-239c-4cb9-8847-00904165f219" name="PaymentTransactionSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionSearch</con:operation>
      <con:request name="PaymentTransactionSearch_V2_0" id="7638b8e1-70d4-4e75-809e-1d54db712e2b">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app02.man.cosng.net:22411/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <!--Optional:-->
               <!--Optional:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="5f55896c-75d1-4f6c-9acb-25eb742fe0e0" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="60d368f0-95aa-452d-9d47-61aff0d328a2" name="Not SOAP Fault"/>
        <con:assertion type="XPath Match" id="f855d044-8f85-4982-9791-4053c9bd681a" name="XPath Match_RECEIPT_ORDER_PRINT">
          <con:configuration>
            <path>declare namespace ns5='urn:pins.payment.evry.com:ws:paymentsearch:v2_0';
declare namespace ns3='urn:pins.payment.evry.com:domain:search:v2_0';
//ns5:PaymentTransactionSearchResponse[1]/ns5:result[1]/ns3:result[1]/ns3:operationsArray</path>
            <content>*RECEIPT_ORDER_PRINT*</content>
            <allowWildcards>true</allowWildcards>
            <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            <ignoreComments>false</ignoreComments>
          </con:configuration>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="fef9bb3a-e281-4f66-850e-8745a1bebf69" name="Validate_OperationalArray">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			assert receiptOrder.toString().toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentTransactionSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="9d0c6250-2402-4e56-a934-d709cd005dde" name="PaymentTransactionSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionSearch</con:operation>
      <con:request name="PaymentTransactionSearch_V1_9" id="aadf645f-2749-4957-a8a0-b7017697dc86">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <!--Optional:-->
               <!--Optional:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="b776fbd8-ff0c-41ff-b514-1b0ce4b3d91b" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="83300c2a-74a2-42ba-9117-1deae74b5f17" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="bab344a8-026a-4ddf-a3b2-82857d3f43e6" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="e4afed71-6c10-44df-aa8b-fa4b1e5e0376" name="ReceiptOrderValidate">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentTransactionSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="e314c85c-6b51-4eeb-812f-b480fa77e2e6" name="PaymentTransactionSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionSearch</con:operation>
      <con:request name="PaymentTransactionSearch_V1_8" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="7af65e03-3520-4295-9610-9c6be017a340">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Zero or more repetitions:-->
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <!--Optional:-->
               <!--Optional:-->
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="05d03fb1-5990-4ee3-9723-084b5f22ac49" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="ffa119d2-de6e-4b5b-9278-235fd480cddf" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="1f0a8029-76c2-430f-9e5c-cf3fb4d3f708" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="77d6719c-ff5f-4597-888b-c76a9d472180" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentTransactionSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="1b1bfd11-4e22-4383-a9fd-a8b4bbc906f0" name="PaymentTransactionSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionSearch</con:operation>
      <con:request name="PaymentTransactionSearch_V1_7" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="2a6518aa-09d2-48b0-b50e-3fbc582c28ba">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_7</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="59aabcc7-3264-40c5-b574-5c790a97b9d8" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="f3c988c2-0e62-490c-a471-bc44f9c768b4" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="10736392-c798-4e19-9a66-4242b92c9e88" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="53cac538-45c4-49e6-abbe-04a24d7d2e5c" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentTransactionSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="412e3e9b-bb26-451a-a327-0e801b9ef7c1" name="PaymentTransactionSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentTransactionSearch</con:operation>
      <con:request name="PaymentTransactionSearch_V1_6" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="932e0766-ba31-4afa-9471-71ff884c7df3">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V1_6</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">
   <soapenv:Header>
       <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentTransactionSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:commonCriteria>
            <urn1:transactionCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  
               </urn1:amount>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:bankEmployeeInitiated>false</urn1:bankEmployeeInitiated>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:filterByOrgUnit>false</urn1:filterByOrgUnit>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Zero or more repetitions:-->
               
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId><urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:dateFromTo>
               </urn1:requestedExecutionDate>
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:transactionCriteria>
         </urn:searchCriteria>
      </urn:PaymentTransactionSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="dc489511-51d8-4fbb-9c45-337a997d1056" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="7da00380-422e-47cf-9d5d-fd37d7891f5a" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="9f214ee0-36f7-4485-999b-aa0d469a68c3" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="fd35bf7d-0f93-42ef-90a8-3d4c5e21b7d9" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentTransactionSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="5fbd7d1a-3267-4b4f-b557-654eecba99a8" name="PaymentPaymentInfoSearch_V2_0">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V2_0PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoSearch</con:operation>
      <con:request name="PaymentPaymentInfoSearch_V2_0" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="34d5a517-58a5-480e-810e-83df08c729ca">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:23621/pin/services/PINSPaymentSearch_V2_0</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v22" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v2_0" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v2_0" xmlns:urn2="urn:pins.payment.evry.com:domain:common:v2_0" xmlns:urn3="urn:pins.payment.evry.com:domain:complex-types:v2_0">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <urn2:StartIndex>0</urn2:StartIndex>
                  <urn2:MaximumNumberOfElements>10</urn2:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:paymentInfoCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 4 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn3:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn3:amountMaxMin>
                  <!--Optional:-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:requestedExecutionDate><urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:paymentInfoCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="2562cdeb-98c0-49b5-b78c-b1e3e31858a9" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="e2349c06-bbb2-4f17-86d7-f1f347d13ade" name="Not SOAP Fault"/>
        <con:assertion type="GroovyScriptAssertion" id="08689b24-f573-4e1d-b9c3-99305c8b4d85" name="Validate_operationsArray">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v2_0/PINSPaymentSearch_V2_0PortType/PaymentPaymentInfoSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="6fde23c5-3217-4cf3-a545-4b1f6da3a386" name="PaymentPaymentInfoSearch_V1_9">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_9PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoSearch</con:operation>
      <con:request name="PaymentPaymentInfoSearch_V1_9" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b7521088-fb5d-4f73-9952-ffdfbb54a07e">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.107:22561/pin/services/PINSPaymentSearch_V1_9</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_9" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_9" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v8">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
            </urn1:commonCriteria>
            <urn1:paymentInfoCriteria>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId></urn1:paymentInfoCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="af6fb876-c1c1-44ad-a5d7-5b2ae591cc67" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="d67f0974-049a-46c7-afda-a3a5d39c8959" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="32b1a45b-83ee-43d2-a408-1051c15a4401" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="07dedb08-feb5-4771-98cb-9d0c354bf41a" name="ReceiptOrder Validation">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:pins.payment.evry.com:ws:paymentsearch:v1_9/PINSPaymentSearch_V1_9PortType/PaymentPaymentInfoSearchRequest"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="41f22dd4-6019-45ca-bc72-6612de3cd728" name="PaymentPaymentInfoSearch_V1_8">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_8PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoSearch</con:operation>
      <con:request name="PaymentPaymentInfoSearch_V1_8" id="15b73130-2def-4a79-a3a6-9dd878af80a6">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_8</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_8" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_8" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pins.payment.evry.com:domain:sepa-complex-types:v7">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:paymentInfoCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:paymentInfoCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="035a31ac-bf6e-49d7-8a0d-a25ecc2d2b6f" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="36df566c-bea7-405f-8457-607eab3346df" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="28bf79de-539b-4f55-9b58-a38090c7bd9f" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="0f73eefe-852d-4c72-8076-8d4676ceaadf" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_8/PINSPaymentSearch_V1_8PortType/PaymentPaymentInfoSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="67b26bbc-1534-44f2-b8cd-ec3363b7fb14" name="PaymentPaymentInfoSearch_V1_7">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_7PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoSearch</con:operation>
      <con:request name="PaymentPaymentInfoSearch_V1_7" id="eefdd2a3-c805-4acb-b229-142de04d7bf2">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://ald-eos-g-app04.man.cosng.net:22641/pin/services/PINSPaymentSearch_V1_7Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.evry.com:ws:paymentsearch:v1_7" xmlns:urn1="urn:pins.payment.evry.com:domain:search:v1_7" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.evry.com:domain:sepa-complex-types:v6">
   <soapenv:Header>
      <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:commonCriteria>
            <urn1:paymentInfoCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:amountMaxMin>
                  <!--Optional:-->
               </urn1:amount>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     <!--Optional:-->
                  </urn2:dateFromTo>
               </urn1:requestedExecutionDate>
               <urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
               <!--Optional:-->
               <!--Optional:-->
            </urn1:paymentInfoCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="9a915e8b-cec8-47e6-84fa-5007433077cd" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="b1c75a51-512e-48eb-b464-c3421da8c532" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="f2853fcc-8e45-45a7-b1f4-ac2eb77e1d1b" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="7984ff68-0e73-4228-8152-b194579038b3" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.evry.com:ws:paymentsearch:v1_7/PINSPaymentSearch_V1_7PortType/PaymentPaymentInfoSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:testStep type="request" id="d287392a-2133-42fc-ac5d-ee7bf7ac350a" name="PaymentPaymentInfoSearch_V1_6">
    <con:settings/>
    <con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <con:interface>PINSPaymentSearch_V1_6PortTypeSoap11</con:interface>
      <con:operation>PaymentPaymentInfoSearch</con:operation>
      <con:request name="PaymentPaymentInfoSearch_V1_6" id="a10341ec-ccea-436a-ae5b-b802a2538430">
        <con:settings>
          <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
        </con:settings>
        <con:encoding>UTF-8</con:encoding>
        <con:endpoint>http://10.246.89.108:22641/pin/services/PINSPaymentSearch_V1_6Service</con:endpoint>
        <con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:wsc="http://edb.com/ws/WSCommon_v21" xmlns:urn="urn:pins.payment.edb.com:ws:paymentsearch:v1_6" xmlns:urn1="urn:pins.payment.edb.com:domain:search:v1_6" xmlns:con="http://control.ws.payment.edb.com" xmlns:urn2="urn:pays.payment.edb.com:domain:sepa-complex-types:v5">
   <soapenv:Header>
       <wsc:AutHeader>
         <wsc:SourceApplication>${Properties#SourceApplication}</wsc:SourceApplication>
         <wsc:DestinationApplication>PINS</wsc:DestinationApplication>
         <wsc:Function>paymentAuthorizationCreate</wsc:Function>
         <wsc:Version>1.0</wsc:Version>
         <wsc:ClientContext>
            <wsc:userid>${Properties#UserID}</wsc:userid>
            <wsc:credentials>${Properties#credentials}</wsc:credentials>
            <wsc:channel>${Properties#channel}</wsc:channel>
            <wsc:orgid>${Properties#orgid}</wsc:orgid>
            <wsc:customerid>${Properties#customerid}</wsc:customerid>
            <wsc:ip>1.1.1.1</wsc:ip>
            <wsc:item key="${Properties#item1}" value="${Properties#value1}"/>
            <wsc:item key="${Properties#item2}" value="${Properties#value2}"/>
         </wsc:ClientContext>
      </wsc:AutHeader>
   </soapenv:Header>
   <soapenv:Body>
      <urn:PaymentPaymentInfoSearchRequest>
         <urn:searchCriteria>
            <urn1:commonCriteria>
               <urn1:elementControl>
                  <con:StartIndex>0</con:StartIndex>
                  <con:MaximumNumberOfElements>10</con:MaximumNumberOfElements>
               </urn1:elementControl>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:commonCriteria>
            <urn1:paymentInfoCriteria>
               <!--Optional:-->
               <urn1:amount>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:amountMaxMin>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:amountMaxMin>
                  <!--Optional:-->
                  
               </urn1:amount>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               <urn1:showHidden>false</urn1:showHidden>
               <!--Zero or more repetitions:-->
               
               <!--Optional:-->
               <urn1:requestedExecutionDate>
                  <!--You have a CHOICE of the next 2 items at this level-->
                  <!--Optional:-->
                  
                  <!--Optional:-->
                  <urn2:dateFromTo>
                     <!--Optional:-->
                     
                     <!--Optional:-->
                     
                  </urn2:dateFromTo>
               </urn1:requestedExecutionDate><urn1:messageId>${Fetch LAFU Data#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]/MESSAGEID[1]}</urn1:messageId>
               <!--Optional:-->
               
               <!--Optional:-->
               
               <!--Optional:-->
               
            </urn1:paymentInfoCriteria>
         </urn:searchCriteria>
      </urn:PaymentPaymentInfoSearchRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request>
        <con:assertion type="Valid HTTP Status Codes" id="abc59953-985b-4645-ab11-825a3b1d50cd" name="Valid HTTP Status Codes">
          <con:settings/>
          <con:configuration>
            <codes>200</codes>
          </con:configuration>
        </con:assertion>
        <con:assertion type="SOAP Fault Assertion" id="c23ad11c-ed9f-4008-96ae-17f403d34bdb" name="Not SOAP Fault"/>
        <con:assertion type="Schema Compliance" id="98a80cf7-e54a-44bb-a6bb-c0913cb01862" name="Schema Compliance">
          <con:configuration/>
        </con:assertion>
        <con:assertion type="GroovyScriptAssertion" id="6ada248e-cb01-4b69-8313-bd68bfbdcb27" name="Script Assertion">
          <con:configuration>
            <scriptText>def testStepName
def xmlHold
//def testStepName
//def xmlHold
def receiptOrder
def slurperResponse
def receiptOrderRes
def paymentStatus
def OpeArrayRes
def ReadOrSearchFlag
def PaymentHistoricReadFlag = false
def PaymentReadFlag = false

def PaymentMessageSearchFlag = false
def PaymentAccountSearchFlag = false
def PaymentPaymentInfoSearchFlag = false
def PaymentTransactionSearchFlag = false
def PaymentTransactionHistoricSearchFlag = false
def PaymentPaymentInfoHistoricSearchFlag = false



	 receiptOrder = context.expand( '${Properties#ReceiptOrder}' )
      paymentStatus = context.expand( '${Properties#PaymentStatus}' )
      
	testStepName = messageExchange.modelItem.testStep.name   //to get the Test Step Name
	xmlHold = messageExchange.responseContentAsXml.toString()  //to store the response as Xml string
	
	slurperResponse = new XmlSlurper().parseText(xmlHold)
	
	if (xmlHold.contains("PaymentHistoricReadResponse")){
	 	log.info "PaymentHistoricReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentHistoricReadFlag = true
	 }

    if (xmlHold.contains("PaymentReadResponse")){
	 	log.info "PaymentReadResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentReadResponse.paymentResult.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentReadResponse.paymentResult.operationsArray
	 	ReadOrSearchFlag = 'READ'
	 	PaymentReadFlag = true
	 }

	 if (xmlHold.contains("PaymentMessageSearchResponse")){
	 	log.info "PaymentMessageSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentMessageSearchResponse.result.transactionResult.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentMessageSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentAccountSearchResponse")){
	 	log.info "PaymentAccountSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentAccountSearchResponse.result.result.transaction.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentAccountSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentAccountSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentPaymentInfoSearchResponse")){
	 	log.info "PaymentPaymentInfoSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	 	PaymentPaymentInfoSearchFlag = true
	 }

	  if (xmlHold.contains("PaymentTransactionSearchResponse")){
	 	log.info "PaymentTransactionSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionSearchFlag = true
	 }
	  if (xmlHold.contains("PaymentTransactionHistoricSearchResponse")){
	 	log.info "PaymentTransactionHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentTransactionHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentTransactionHistoricSearchFlag = true
	 }
  if (xmlHold.contains("PaymentPaymentInfoHistoricSearchResponse")){
	 	log.info "PaymentPaymentInfoHistoricSearchResponse-->"
	 	receiptOrderRes =  slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.nationalSpecificPaymentInformation.receiptOrder.toString()
	 	OpeArrayRes = slurperResponse.Body.PaymentPaymentInfoHistoricSearchResponse.result.result.operationsArray
	 	ReadOrSearchFlag = 'SEARCH'
	    PaymentPaymentInfoHistoricSearchFlag = true
	 }

	 
def versionCheck = testStepName.substring(( testStepName.split('_')[0]).length() +1) 	 	
log.info "versionCheck-->" +  versionCheck


 switch(versionCheck){
 	case ['V2_0' , 'V1_6', 'V1_7' , 'V1_8' , 'V1_9','V1_10']:
 		if (ReadOrSearchFlag.equalsIgnoreCase('READ') ){
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()
 		}else if (ReadOrSearchFlag.equalsIgnoreCase('SEARCH') &amp;&amp; versionCheck.equalsIgnoreCase('V2_0') &amp;&amp;   (PaymentMessageSearchFlag || PaymentTransactionSearchFlag ||
 			PaymentPaymentInfoHistoricSearchFlag || PaymentTransactionHistoricSearchFlag) ){
 			 
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
			assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  
 		}
 		else{
			log.info "Receipt Order tag not required"
 			log.info "receiptOrderRes--" + receiptOrderRes + "\\n" + "ReadOrSearchFlag -" + ReadOrSearchFlag + "******" + versionCheck
 			assert receiptOrderRes.toUpperCase()  == ""
 		}
	break;
//	case ['V1_5']:
//	
// 	break;

 	default :
 	assert false , "Version not available for ReadOrSearchFlag check"
 }
//log.info "receiptOrderRes--" + receiptOrderRes
//assert receiptOrder.toString().toUpperCase()  == receiptOrderRes.toUpperCase()  


def  operationalArrayList = [ ]

//def x = slurperResponse.Body.PaymentHistoricReadResponse.paymentResult.operationsArray.'**'.findAll {	
OpeArrayRes.'**'.findAll {	
	operationalArrayList.add(it.text()	)	
}

log.info "operationalArrayList-->" + operationalArrayList
def tempList = [ ]
switch(versionCheck){ //Verify Operational Array
	case 'V2_0':			
				log.info "versionCheck -->" + versionCheck + "paymentStatus-->" + paymentStatus
				switch (paymentStatus){
				case 'COMP':
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_STICKER')					
					}		
					break
				case [ 'RFDD', 'LAFU','STOP']:
					if (receiptOrder == 'NONE' )  {
						tempList.add ('RECEIPT_ORDER_STICKER')
						tempList.add ('RECEIPT_ORDER_PRINT')
					}
					else if ( receiptOrder == 'STICKER'){
						tempList.add ('RECEIPT_ORDER_PRINT')		
						tempList.add ('RECEIPT_ORDER_REMOVE')						
					}		
					else if ( receiptOrder == 'PRINT'){
						tempList.add ('RECEIPT_ORDER_STICKER')		
						tempList.add ('RECEIPT_ORDER_REMOVE')			
					}
					break
				default:
				assert false,'No case found for operationalArrayList'
//					log.info "No case found"	
				}
	
	break;
	default:
	tempList.add ('REORDER_STICKER')
	
	}

log.info "operationalArray found in response-->" + operationalArrayList
log.info "operationalArray expected-->" + tempList
assert operationalArrayList.containsAll(tempList)</scriptText>
          </con:configuration>
        </con:assertion>
        <con:credentials>
          <con:selectedAuthProfile>No Authorization</con:selectedAuthProfile>
          <con:authType>No Authorization</con:authType>
        </con:credentials>
        <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
        <con:wsaConfig action="urn:pins.payment.edb.com:ws:paymentsearch:v1_6/PINSPaymentSearch_V1_6PortType/PaymentPaymentInfoSearchRequest" mustUnderstand="NONE" version="200508"/>
        <con:wsrmConfig version="1.2"/>
        <con:environmentSpec>
          <con:entry environmentId="bfc46098-7126-4e7a-9bb8-a84a8c09bdf4">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="8de4f088-ed70-4c0c-8902-4d113b89b9c9">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="606de439-9af0-4a56-8685-3b41eae80c54">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="7e7d541d-7700-4e30-b618-2383a86673d0">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="a9fe1c68-a44a-47a3-92a0-597ac3558eed">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="62d35584-b9e8-4224-9147-332b8581935f">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
          <con:entry environmentId="89ad1e7e-0554-4e47-a121-4b99b2e5bb7a">
            <con:authProfile>Inherit From Parent</con:authProfile>
          </con:entry>
        </con:environmentSpec>
      </con:request>
    </con:config>
  </con:testStep>
  <con:properties>
    <con:property>
      <con:name>ConnectionString</con:name>
      <con:value>jdbc:oracle:thin:pendata/pen@//10.246.89.97:1530/pen_g_functional</con:value>
    </con:property>
  </con:properties>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>8167094a-00a6-434a-9588-31a9de204fb8</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>921ce22c-5c29-4284-a083-a1a1a0117555</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>a70f8027-178c-4de6-8bc5-74ac99217e62</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>258ba11c-c48e-4bfc-a96a-d5f6470381a6</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>aaa0220f-b6d3-48f0-a5a7-a2b12983d00a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1c7ee62f-4466-469a-84ec-e66f85b086d2</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>35f8d9ed-12a3-4131-a1a3-47b30c8a0708</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>52921ec2-4da3-4a88-a87e-bdcb9e775726</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>42d775b8-c8f2-4bac-8646-ad15bb253f8e</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>08f617c7-e529-4c47-9316-68b8a02e3a43</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>1b2f72c5-5fc2-440a-ae62-c56eddb5b9ed</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>0e09f67d-e171-4e98-8285-08b7c36fd12b</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>b89e8b1b-311e-486d-aee3-3d830953f5aa</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ed499375-5c45-4827-b40f-3b45f68e310c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>18f64c3e-b805-4e3f-91b7-7e5b20b59b2a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>3d97f0ba-0543-41c0-ba74-ce324930262c</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d5767518-15d4-4a0a-ba37-e0e28853c0cf</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>48737036-481f-4fd0-9aa9-b2c4f54f3ecf</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>181e9e68-aed0-4e05-aeab-6f04c1ccd907</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
</con:testCase>