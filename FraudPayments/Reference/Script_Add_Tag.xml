<?xml version="1.0" encoding="UTF-8"?>
<con:testCase id="397018ee-4f21-45aa-91d6-536efb663ccf" discardOkResults="false" failOnError="true" failTestCaseOnErrors="true" keepSession="false" name="Script_Add_Tag" searchProperties="true" timeout="0" disabled="true" xmlns:con="http://eviware.com/soapui/config">
  <con:settings>
    <con:setting id="397018ee-4f21-45aa-91d6-536efb663ccffileName">Script_Add_Tag</con:setting>
  </con:settings>
  <con:savedRecentRuns>1</con:savedRecentRuns>
  <con:testStep type="groovy" name="setJdbcConnectionString" id="9990cf6c-6121-4893-a63a-fbfddf4d3e6a" disabled="true">
    <con:settings/>
    <con:config>
      <script>//	Set "connectionString" peroperties on Project Level custom Properties

def environ = context.testCase.testSuite.project.getActiveEnvironment().getName();

envDetails	= DetectTestEnvironment.getDetailsOf(environ);
pwhString	= envDetails[4];

log.info environ
log.info pwhString

testRunner.testCase.testSuite.project.setPropertyValue("pwhConnectionString", pwhString)
connectionString = context.testCase.testSuite.project.getPropertyValue("pwhConnectionString");

log.info connectionString
jdbc:oracle:thin:pwhdata/pwh@//10.246.89.97:1530/pwh_g_st</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_WSDL_EndPoint" id="d5f32975-ced7-4765-8758-1e69d24a0785" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[import com.eviware.soapui.config.*
import com.eviware.soapui.model.environment.*

addEnvironment ("G-D14");
//addEndPointsLoop();

public void addEndPointsLoop()
{
	int envCount = context.testCase.testSuite.project.getEnvironmentCount();
	for ( int i = 0; i <envCount ; i++ )
	{
		envName = context.testCase.testSuite.project.getEnvironmentAt( i ).getName();
		log.info "Looping envName: "+envName
		addEnvironment(envName)
	}
}

public void addEnvironment (envro)
{
	getEnv	= context.testCase.testSuite.project.getEnvironmentByName(envro);
	apiCount = testRunner.testCase.testSuite.project.getInterfaceCount();
	
	result	= DetectTestEnvironment.getDetailsOf(envro);
	validEnv= result[0];
	eos_ip	= result[1];
	pwhString = result[4];
	pwhConnectionString = result[4];
	
	if (getEnv != null && validEnv != null ) 
	{
		setEndPoint(envro);
	} else if (getEnv == null && validEnv != null ) 
	{
		createNewTestEnvironment(envro);
	} else if (validEnv == null ) 
	{
		log.info "Test Environment is not defined in \"DetectTestEnvironment\" Groovy File"
	}
}

public void createNewTestEnvironment(env) 
{
	def project = context.testCase.testSuite.project;
	def name = env

	project.addNewEnvironment(name);
	project.setActiveEnvironment(name);

	def environ = project.getActiveEnvironment();
	for ( int i = 0; i < apiCount ; i++ )
	{
		def wsdl = testRunner.testCase.testSuite.project.getInterfaceAt(i)
		URL url = new URL(wsdl.getDefinition())
		String urlDefinition = url.toString();

		def binding = context.testCase.testSuite.project.getInterfaceAt(i).getName().toString();
		newService = environ.addNewService(binding, com.eviware.soapui.config.ServiceConfig.Type.Enum.forString("SOAP"));

		def serviceConfig = newService.getConfig();
		def endpointConfig = serviceConfig.addNewEndpoint();
		endpointConfig.setStringValue(urlDefinition)
		newService.buildEndpoint(endpointConfig);
		def isCopy1 = true;
		environ.populateService(newService, isCopy1);
		environ.release();
	}
	log.info "Created New Test Environment "+env
	setEndPoint(env);
}

public void setEndPoint(env) 
{
	testRunner.testCase.testSuite.project.setPropertyValue("pwhConnectionString", pwhConnectionString)
	delimitor = "PortTypeSoap11";
	getEnv	= context.testCase.testSuite.project.getEnvironmentByName(env);
	for (int i = 0; i < apiCount ; i++ ) 
	{
		wsdlInterface = testRunner.testCase.testSuite.project.getInterfaceAt(i).getName();
		wsdlService = getEnv.getService(wsdlInterface, com.eviware.soapui.config.ServiceConfig.Type.Enum.forString("SOAP"));

		if (wsdlInterface.contains ("PINS") || wsdlInterface.contains ("PAYS")  && wsdlService != null) 
		{
			service = wsdlInterface.split(delimitor).toString();
			service = service.replaceAll("[^a-zA-Z0-9_]","");
			setString = "http://"+eos_ip+"/pin/services/"+service+"?wsdl";
			urlConf	= wsdlService.getEndpoint().getConfig();
			if ( urlConf != null ) {
				urlConf.setStringValue(setString);
			}
		}
	}
	log.info "Setting endpoints for "+env+" is successful";
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCA_ALL" id="ccb5e808-5070-4324-8696-cb078cfe80d4" disabled="true">
    <con:settings/>
    <con:config>
      <script><![CDATA[testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCA tags for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCAPerformed = "SCAPerformed";
	SCALastPerformed = "SCALastPerformed";
	SCAExemptionType = "SCAExemptionType"

	for (splitString in splitRequest)
	{
		if (splitString.contains("<wsc:item key=\"SCAPerformed\""))
		{
			SCAPerformed = null;
		}
		if (splitString.contains("<wsc:item key=\"SCALastPerformed\""))
		{
			SCALastPerformed = null;
		}
		if (splitString.contains("<wsc:item key=\"SCAExemptionType\""))
		{
			SCAExemptionType = null;
		}
	}
	if(SCAPerformed == "SCAPerformed") 
	{
		addItems(SCAPerformed,stepName);
	}
	if(SCALastPerformed == "SCALastPerformed") 
	{
		addItems(SCALastPerformed,stepName);
	}
	if(SCAExemptionType == "SCAExemptionType")
	{
		addItems(SCAExemptionType);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAPerformed"		:	tagValue = "<wsc:item key=\"SCAPerformed\" value=\"false\"/>";
												break;
		case "SCALastPerformed"	:	tagValue = "<wsc:item key=\"SCALastPerformed\" value=\"2020-07-25 11:00:00\"/>";
												break;
		case "SCAExemptionType"	:	tagValue = "<wsc:item key=\"SCAExemptionType\" value=\"7516\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("<wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("<")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("</soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}]]></script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCAPerformed" id="471692f9-c4a3-46b3-86bf-762e86b0fd49" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCAPerformed tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCAPerformed = "SCAPerformed";		//	Set value

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCAPerformed\""))
		{
			SCAPerformed = null;					//	If tag is present, then set it as NULL and dont call addItems();
		}
	}
	if(SCAPerformed == "SCAPerformed") 
	{
		addItems(SCAPerformed);				//	if tag value is not null, then set the tag by calling addItems();
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAPerformed"	:	tagValue = "&lt;wsc:item key=\"SCAPerformed\" value=\"false\"/>";
												break;	//	Prepare tag value to insert
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))		//	Find the Payment Channel tag and Add SCA tags below it
		{
			tab = splitString.tokenize("&lt;")[0];	//	Find the Spacing Tabs of the Element
			newSplit = splitString + "\n" + tab + tagValue + '\n';					//	
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	//	if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCALastPerformed" id="34d96d24-a4d5-42ce-9d3a-975f0f5caf1f" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCALastPerformed tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");
	
	SCALastPerformed = "SCALastPerformed";

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCALastPerformed\""))
		{
			SCALastPerformed = null;
		}
	}
	if(SCALastPerformed == "SCALastPerformed") 
	{
		addItems(SCALastPerformed);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCALastPerformed"	:	tagValue = "&lt;wsc:item key=\"SCALastPerformed\" value=\"2020-07-25 11:00:00\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_SCAExemptionType" id="ac7d82a8-0b7f-4407-b8a2-e083413ae275" disabled="true">
    <con:settings/>
    <con:config>
      <script>testRunner.testCase.testSuite.project.getTestSuiteList().each { testsuite ->
	testsuite.getTestCaseList().each { testcase ->
		testcase.getTestStepList().each { teststep ->
			stepType = "${teststep.getClass()}"
			if (stepType.contains("WsdlTestRequestStep")) {
				suiteName =  "${testsuite.getName()}"
				caseName =  "${testcase.getName()}"
				stepName = "${teststep.getName()}"
				stepType = "${teststep.getClass()}"
				setTag();
			}
		}
	}
	log.info "Done setting SCAExemptionType tag for test suite : " + suiteName
}

public void setTag()
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");

	SCAExemptionType = "SCAExemptionType"

	for (splitString in splitRequest)
	{
		if (splitString.contains("&lt;wsc:item key=\"SCAExemptionType\""))
		{
			SCAExemptionType = null;
		}
	}
	if(SCAExemptionType == "SCAExemptionType")
	{
		addItems(SCAExemptionType);
	}
}

public void addItems(addTag) 
{
	testRequest = context.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].testSteps[stepName].testRequest;
	request = testRequest.requestContent;
	splitRequest = request.split("\n");	// create an array of lines of the request, split by newline characters
	newRequest = "";	// build a new, empty request

	switch(addTag)
	{
		case "SCAExemptionType"	:	tagValue = "&lt;wsc:item key=\"SCAExemptionType\" value=\"7516\"/>";
												break;
		default							:	throw new IllegalArgumentException("Expected Tag Did Not Match");
	}

	for (splitString in splitRequest)	// loop through every line in the request that was split
	{
		if (splitString.contains("&lt;wsc:item key=\"PaymentChannel\""))	// Find the payment channel tag and add SCA tags
		{
			tab = splitString.tokenize("&lt;")[0];		// find the spacing tabs of the element in question
			newSplit = splitString + "\n" + tab + tagValue + '\n';
			newRequest += newSplit;
		}
		else if (splitString.contains("&lt;/soapenv:Envelope>"))
		{
			newRequest += splitString;
		}
		else
		{
			newRequest += splitString + '\n';	// if the line is not the one being searched for, append the line as normal, with new line.
		}
	}
	testRequest.setRequestContent(newRequest);
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Add_Tag_BM-PaymentChannel" id="239cc469-ad5d-4e5c-a5e6-85c8bf68b864" disabled="true">
    <con:settings/>
    <con:config>
      <script>removeAssertion = "Script Assertion";
testCaseCount = testRunner.testCase.testSuite.testCaseCount

for (int i =0 ; i &lt; testCaseCount ; i++ ) {
	caseName = testRunner.testCase.testSuite.getTestCaseAt(i).getName()
	testStepCount = testRunner.testCase.testStepCount;
	for ( j = 0; j &lt; testStepCount ; j++ ) {
		testSet = testRunner.testCase.getTestStepAt(j)
		stepType = "${testSet.getClass()}"
		if ( testSet != null &amp;&amp; stepType.contains("WsdlTestRequestStep"))  	{
			stepName = testSet.getName()
			assertionsList = testRunner.testCase.testSuite.getTestCaseAt(i).getTestStepByName(stepName).getAssertionList();
			remove_Assertion();
		}
	}
}

public void remove_Assertion() {
	for ( e in assertionsList) 	{
		assertionSelected = e.getName()
		if (assertionSelected.contains( removeAssertion)) {
			testSet.removeAssertion(e)
			log.info "DELETE SUCCESS: Case \" "+caseName+" \" and Test Step:= "+stepName+" and Assertion Removed is : "+assertionSelected
		}
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Update_Java_TimeStamp" id="89e3720c-1a0e-4beb-8d6f-35424f10e4f4" disabled="true">
    <con:settings/>
    <con:config>
      <script>/*
 * This updates test case properties with below mentioned time stamp
 * Change the property name as defined in your "PROPERTIES" test step before execution
 */
suiteCount = testRunner.testCase.testSuite.project.getTestSuiteCount()
for ( i = 0; i &lt; suiteCount ; i++ )
{
	suiteName = testRunner.testCase.testSuite.project.getTestSuiteAt( i ).getName()
	updateDateTimeProperties(suiteName);
}

public void updateDateTimeProperties(suiteName)
{
	suiteCount = i+1
	log.info "******* Test Suite: "+suiteCount+" - "+suiteName+" *******"
	newDate = '${= java.time.LocalDate.now()+1}' as String
	asbDate = '${= java.time.LocalDate.now()-1}T13:47:21.443376+05:30' as String

	testCaseCount = testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseCount()

	for (int j =0 ; j &lt; testCaseCount ; j++ ) {
		caseCount = j+1
		caseName = testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseAt( j ).getName()
		log.info "-->Test Case:  "+caseCount+" - "+caseName
		
		targetStep = testRunner.testCase.testSuite.project.testSuites[suiteName].testCases[caseName].getTestStepByName( "Properties" )
		if ( targetStep != null)
		{
			u = testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseAt( j ).getTestStepByName("Properties").getPropertyValue("ReqExnDate")
			v = testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseAt( j ).getTestStepByName("Properties").getPropertyValue("SCALastPerformed")
			if (u != null)
			{
				testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseAt( j ).getTestStepByName("Properties").setPropertyValue("ReqExnDate",newDate)
			}
			if (v != null)
			{
				testRunner.testCase.testSuite.project.testSuites[suiteName].getTestCaseAt( j ).getTestStepByName("Properties").setPropertyValue("SCALastPerformed",asbDate)
			}
		}
	}
}</script>
    </con:config>
  </con:testStep>
  <con:testStep type="groovy" name="Remove_Script_Assertions" id="c9df7f10-2e0a-4640-b194-52f007ec3097" disabled="true">
    <con:settings/>
    <con:config>
      <script>/*
 * This will remove assertions mentioned in the name "removeAssertion" from each step of a test case
 * Change the property name as defined in your "PROPERTIES" test step before execution
 */

//removeAssertion() ;
log.info "Hi"

public void removeAssertion() 
{
	removeAssertion = "Script Assertion";
	suiteName = testRunner.testCase.testSuite.getName();
	testCaseCount = testRunner.testCase.testSuite.testCaseCount
	
	for (int i =0 ; i &lt; testCaseCount ; i++ ) {
		caseName = testRunner.testCase.testSuite.getTestCaseAt(i).getName()
		testStepCount = testRunner.testCase.testSuite.getTestCaseByName(caseName).getTestStepCount();
		log.info "Test Suite "+suiteName +" has "+testCaseCount+"Test Cases and the test case "+caseName+" has "+testStepCount+" test steps"
	
		for ( j = 0; j &lt; testStepCount ; j++ ) {
			testSet = testRunner.testCase.testSuite.getTestCaseByName(caseName).getTestStepAt(j);
			stepType = "${testSet.getClass()}"
			
			if ( testSet != null &amp;&amp; stepType.contains("WsdlTestRequestStep"))  	{
				stepName = testSet.getName()
				assertionsList = testSet.getAssertionList();
				remove_Assertion();
			}
		}
	}
}

public void remove_Assertion() 
{
	for ( e in assertionsList) 	{
		assertionSelected = e.getName()
		if (assertionSelected.contains( removeAssertion)) {
			testSet.removeAssertion(e)
		}
	}
}</script>
    </con:config>
  </con:testStep>
  <con:setupScript/>
  <con:properties/>
  <con:reportParameters/>
  <con:breakPoints>
    <con:testStepId>6d6f5555-19ab-4ca4-80d4-d43adb6ef315</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>c710393d-0aea-46d4-9e87-9adeaaa2efcf</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>d3f0e15c-8e43-4ba0-9a65-9153f976fafd</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>ed6bd724-dfe8-4ad6-9d58-0e1f669f3de5</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>64b6958f-7dfb-46a3-98f4-ba96ab33b4ae</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>06e19396-adc5-4fc5-ade1-c594d49bb038</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>89e3720c-1a0e-4beb-8d6f-35424f10e4f4</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:breakPoints>
    <con:testStepId>9990cf6c-6121-4893-a63a-fbfddf4d3e6a</con:testStepId>
    <con:status>NONE</con:status>
    <con:properties/>
  </con:breakPoints>
  <con:environmentSpec>
    <con:entry environmentId="31411996-3421-47a9-90cc-0e150c5f5aec">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
    <con:entry environmentId="c57aea96-d15f-46e4-bfa2-4b8ef33c6b0e">
      <con:authProfile>Inherit From Parent</con:authProfile>
    </con:entry>
  </con:environmentSpec>
</con:testCase>
